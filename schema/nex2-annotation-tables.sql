
-- Generated by Ora2Pg, the Oracle database Schema converter, version 17.4
-- Copyright 2000-2016 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=sgd-nex2-db.stanford.edu;sid=SGD

SET client_encoding TO 'UTF8';

\set ON_ERROR_STOP ON

-- Annotation tables

DROP TABLE IF EXISTS nex.bindingmotifannotation CASCADE;
CREATE TABLE nex.bindingmotifannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	dbentity_id bigint NOT NULL,
	source_id bigint NOT NULL,
	taxonomy_id bigint NOT NULL,
	reference_id bigint,
	obj_url varchar(500) NOT NULL,
	motif_id bigint NOT NULL,
	logo_url varchar(500) NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT bindingmotifannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.bindingmotifannotation IS 'Transcription factor motif logos from the YeTFaSCo database.';
COMMENT ON COLUMN nex.bindingmotifannotation.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.bindingmotifannotation.obj_url IS 'URL of the object (relative for local links or complete for external links).';
COMMENT ON COLUMN nex.bindingmotifannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.bindingmotifannotation.motif_id IS 'Motif ID from the YeTFaSCo database.';
COMMENT ON COLUMN nex.bindingmotifannotation.logo_url IS 'URL to the motif logo.';
COMMENT ON COLUMN nex.bindingmotifannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.bindingmotifannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.bindingmotifannotation.annotation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.bindingmotifannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.bindingmotifannotation.created_by IS 'Username of the person who entered the record into the database.';
ALTER TABLE nex.bindingmotifannotation ADD CONSTRAINT bindingmotifannotation_uk UNIQUE (dbentity_id,motif_id);
CREATE INDEX bindingmotifannotation_source_fk_index ON nex.bindingmotifannotation (source_id);
CREATE INDEX bindingmotifannotation_ref_fk_index ON nex.bindingmotifannotation (reference_id);
CREATE INDEX bindingmotifannotation_tax_fk_index ON nex.bindingmotifannotation (taxonomy_id);

DROP TABLE IF EXISTS nex.diseaseannotation CASCADE;
CREATE TABLE nex.diseaseannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	dbentity_id bigint NOT NULL,
	source_id bigint NOT NULL,
	taxonomy_id bigint NOT NULL,
	reference_id bigint NOT NULL,
	disease_id bigint NOT NULL,
	eco_id bigint NOT NULL,
    association_type bigint NOT NULL,
	annotation_type varchar(40) NOT NULL,
	disease_qualifier varchar(40),
	date_assigned timestamp NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT diseaseannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.diseaseannotation IS 'Disease Ontology annotations.';
COMMENT ON COLUMN nex.diseaseannotation.annotation_type IS 'Type of disease annotation (high-throughput, manually curated, computational).';
COMMENT ON COLUMN nex.diseaseannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.diseaseannotation.eco_id IS 'FK to ECO.ECO_ID.';
COMMENT ON COLUMN nex.diseaseannotation.annotation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.diseaseannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.diseaseannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.diseaseannotation.disease_qualifier IS 'Qualifier of the disease annotation.';
COMMENT ON COLUMN nex.diseaseannotation.date_assigned IS 'Date the disease annotation was assigned or last reviewed.';
COMMENT ON COLUMN nex.diseaseannotation.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.diseaseannotation.disease_id IS 'FK to DISEASE.DISEASE_ID.';
COMMENT ON COLUMN nex.diseaseannotation.association_type IS 'FK to RO.RO_ID.';
COMMENT ON COLUMN nex.diseaseannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.diseaseannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
ALTER TABLE nex.diseaseannotation ADD CONSTRAINT diseaseannotation_uk UNIQUE (dbentity_id,disease_id,eco_id,reference_id,association_type,annotation_type,source_id);
ALTER TABLE nex.diseaseannotation ADD CONSTRAINT diseaseanno_annotation_type CHECK (ANNOTATION_TYPE IN ('high-throughput', 'manually curated','computational'));
CREATE INDEX diseaseanno_tax_fk_index ON nex.diseaseannotation (taxonomy_id);
CREATE INDEX diseaseanno_disease_fk_index ON nex.diseaseannotation (disease_id);
CREATE INDEX diseaseanno_ref_fk_index ON nex.diseaseannotation (reference_id);
CREATE INDEX diseaseanno_eco_fk_index ON nex.diseaseannotation (eco_id);
CREATE INDEX diseaseanno_source_fk_index ON nex.diseaseannotation (source_id);
CREATE INDEX diseaseanno_ro_fk_index ON nex.diseaseannotation (association_type);

DROP TABLE IF EXISTS nex.diseasesupportingevidence CASCADE;
CREATE TABLE nex.diseasesupportingevidence (
	diseasesupportingevidence_id bigint NOT NULL DEFAULT nextval('detail_seq'),
	annotation_id bigint NOT NULL,
	group_id bigint NOT NULL,
	dbxref_id varchar(40) NOT NULL,
	obj_url varchar(500) NOT NULL,
	evidence_type varchar(10) NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT diseasesupportingevidence_pk PRIMARY KEY (diseasesupportingevidence_id)
) ;
COMMENT ON TABLE nex.diseasesupportingevidence IS 'Evidence to support the disease annotation.';
COMMENT ON COLUMN nex.diseasesupportingevidence.obj_url IS 'URL of the object (relative for local links or complete for external links).';
COMMENT ON COLUMN nex.diseasesupportingevidence.evidence_type IS 'How the supporting evidence is associated with the disease annotation (with, from).';
COMMENT ON COLUMN nex.diseasesupportingevidence.diseasesupportingevidence_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.diseasesupportingevidence.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.diseasesupportingevidence.dbxref_id IS 'External cross reference identifier.';
COMMENT ON COLUMN nex.diseasesupportingevidence.group_id IS 'A grouping number.';
COMMENT ON COLUMN nex.diseasesupportingevidence.annotation_id IS 'FK to DISEASEANNOTATION.ANNOTATION_ID.';
COMMENT ON COLUMN nex.diseasesupportingevidence.created_by IS 'Username of the person who entered the record into the database.';
ALTER TABLE nex.diseasesupportingevidence ADD CONSTRAINT diseasesupportingevidence_uk UNIQUE (annotation_id,dbxref_id,group_id,evidence_type);
ALTER TABLE nex.diseasesupportingevidence ADD CONSTRAINT diseasesupportingevidence_type_ck CHECK (EVIDENCE_TYPE IN ('with', 'from'));

DROP TABLE IF EXISTS nex.diseasesubsetannotation CASCADE;
CREATE TABLE nex.diseasesubsetannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	dbentity_id bigint NOT NULL,
	source_id bigint NOT NULL,
	taxonomy_id bigint NOT NULL,
	reference_id bigint,
	diseasesubset_id bigint NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT diseasesubsetannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.diseasesubsetannotation IS 'A subset of disease annotations that provide a broad overview, often used to summarize results.';
COMMENT ON COLUMN nex.diseasesubsetannotation.diseasesubset_id IS 'FK to DISEASESUBSET.DISEASESUBSET_ID.';
COMMENT ON COLUMN nex.diseasesubsetannotation.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.diseasesubsetannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.diseasesubsetannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.diseasesubsetannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.diseasesubsetannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.diseasesubsetannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.diseasesubsetannotation.annotation_id IS 'Unique identifier (serial number).';
ALTER TABLE nex.diseasesubsetannotation ADD CONSTRAINT diseasesubsetannotation_uk UNIQUE (dbentity_id,diseasesubset_id);
CREATE INDEX diseasesubsetanno_tax_fk_index ON nex.diseasesubsetannotation (taxonomy_id);
CREATE INDEX diseasesubsetanno_source_fk_index ON nex.diseasesubsetannotation (source_id);
CREATE INDEX diseasesubsetanno_diseasesubset_fk_index ON nex.diseasesubsetannotation (diseasesubset_id);
CREATE INDEX diseasesubsetanno_ref_fk_index ON nex.diseasesubsetannotation (reference_id);

DROP TABLE IF EXISTS nex.dnasequenceannotation CASCADE;
CREATE TABLE nex.dnasequenceannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	dbentity_id bigint NOT NULL,
	source_id bigint NOT NULL,
	taxonomy_id bigint NOT NULL,
	reference_id bigint,
	bud_id integer,
	so_id bigint NOT NULL,
	dna_type varchar(50) NOT NULL,
	contig_id bigint NOT NULL,
	seq_version timestamp,
	coord_version timestamp,
	genomerelease_id bigint,
	start_index integer NOT NULL,
	end_index integer NOT NULL,
	strand varchar(1) NOT NULL,
	file_header varchar(200) NOT NULL,
	download_filename varchar(100) NOT NULL,
	file_id bigint,
	residues text NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT dnasequenceannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.dnasequenceannotation IS 'Current DNA sequence details for contig, chromosomal, or plasmid features.';
COMMENT ON COLUMN nex.dnasequenceannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.dnasequenceannotation.contig_id IS 'FK to CONTIG.CONTIG_ID.';
COMMENT ON COLUMN nex.dnasequenceannotation.file_id IS 'FK to FILE.FILE_ID.';
COMMENT ON COLUMN nex.dnasequenceannotation.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.dnasequenceannotation.residues IS 'DNA sequence.';
COMMENT ON COLUMN nex.dnasequenceannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.dnasequenceannotation.dna_type IS 'Type of DNA sequence (CODING, 1KB, GENOMIC).';
COMMENT ON COLUMN nex.dnasequenceannotation.annotation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.dnasequenceannotation.strand IS 'Which strand the sequence is on (Watson = +, Crick = -, None = 0).';
COMMENT ON COLUMN nex.dnasequenceannotation.download_filename IS 'User interface download filename.';
COMMENT ON COLUMN nex.dnasequenceannotation.bud_id IS 'From BUD.SEQ.SEQ_NO.';
COMMENT ON COLUMN nex.dnasequenceannotation.file_header IS 'Fasta header line of the download file.';
COMMENT ON COLUMN nex.dnasequenceannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.dnasequenceannotation.coord_version IS 'Date of the coordinate version.';
COMMENT ON COLUMN nex.dnasequenceannotation.genomerelease_id IS 'FK to GENOMERELEASE.GENOMERELEASE_ID.';
COMMENT ON COLUMN nex.dnasequenceannotation.so_id IS 'FK to SO.SO_ID.';
COMMENT ON COLUMN nex.dnasequenceannotation.end_index IS 'End coordinate.';
COMMENT ON COLUMN nex.dnasequenceannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.dnasequenceannotation.seq_version IS 'Date of the sequence version.';
COMMENT ON COLUMN nex.dnasequenceannotation.start_index IS 'Start coordinate.';
COMMENT ON COLUMN nex.dnasequenceannotation.date_created IS 'Date the record was entered into the database.';
ALTER TABLE nex.dnasequenceannotation ADD CONSTRAINT dnasequenceannotation_uk UNIQUE (dbentity_id,taxonomy_id,contig_id,so_id,dna_type);
ALTER TABLE nex.dnasequenceannotation ADD CONSTRAINT dnasequenceanno_type_ck CHECK (DNA_TYPE IN ('CODING', '1KB', 'GENOMIC'));
ALTER TABLE nex.dnasequenceannotation ADD CONSTRAINT dnasequenceanno_strand_ck CHECK (STRAND IN ('+', '-', '0'));
CREATE INDEX dnasequenceanno_tax_fk_index ON nex.dnasequenceannotation (taxonomy_id);
CREATE INDEX dnasequenceanno_contig_fk_index ON nex.dnasequenceannotation (contig_id);
CREATE INDEX dnasequenceanno_file_fk_index ON nex.dnasequenceannotation (file_id);
CREATE INDEX dnasequenceanno_ref_fk_index ON nex.dnasequenceannotation (reference_id);
CREATE INDEX dnasequenceanno_source_fk_index ON nex.dnasequenceannotation (source_id);
CREATE INDEX dnasequenceanno_so_fk_index ON nex.dnasequenceannotation (so_id);
CREATE INDEX dnasequenceanno_genomerelease_fk_index ON nex.dnasequenceannotation (genomerelease_id);


DROP TABLE IF EXISTS nex.dnasequencealignment CASCADE;
CREATE TABLE nex.dnasequencealignment (
	alignment_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	locus_id bigint NOT NULL,
	contig_id bigint NOT NULL,
	display_name varchar(100) NOT NULL,
	dna_type varchar(50) NOT NULL,
	block_sizes varchar(250),
	block_starts varchar(250),
	contig_start_index integer NOT NULL,
	contig_end_index integer NOT NULL,
	aligned_sequence text NOT NULL,
	snp_sequence text NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT dnasequencealignment_pk PRIMARY KEY (alignment_id)
) ;
COMMENT ON TABLE nex.dnasequencealignment IS 'Multiple sequence alignment.';
COMMENT ON COLUMN nex.dnasequencealignment.alignment_id IS 'FK to LOCUSDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.dnasequencealignment.display_name IS 'Display Name e.g. YFL039C_S288C, YOR028C_YOR029W_W303';
COMMENT ON COLUMN nex.dnasequencealignment.block_starts IS '0,319    (only S288C has it).';
COMMENT ON COLUMN nex.dnasequencealignment.block_sizes IS ' 10,1118  (only S288C has it) .';
COMMENT ON COLUMN nex.dnasequencealignment.dna_type IS 'Type of DNA: allowed values: genomic, upstream IGR, downstream IGR.';
COMMENT ON COLUMN nex.dnasequencealignment.aligned_sequence IS 'Aligned sequence.';
COMMENT ON COLUMN nex.dnasequencealignment.snp_sequence IS 'SNP information.';
COMMENT ON COLUMN nex.dnasequencealignment.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.dnasequencealignment.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.dnasequencealignment.alignment_id IS 'Unique identifier (serial number).';
ALTER TABLE nex.dnasequencealignment ADD CONSTRAINT dnasequencealignment_uk UNIQUE (display_name, dna_type);
ALTER TABLE nex.dnasequencealignment ADD CONSTRAINT dnasequencealignment_type_ck CHECK (DNA_TYPE IN ('genomic', 'upstream IGR','downstream IGR'));
CREATE INDEX dnasequencealignment_locus_fk_index ON nex.dnasequencealignment (locus_id);
CREATE INDEX dnasequencealignment_contig_fk_index ON nex.dnasequencealignment (contig_id);


DROP TABLE IF EXISTS nex.dnasubsequence CASCADE;
CREATE TABLE nex.dnasubsequence (
	dnasubsequence_id bigint NOT NULL DEFAULT nextval('detail_seq'),
	annotation_id bigint NOT NULL,
	dbentity_id bigint NOT NULL,
	display_name varchar(500) NOT NULL,
	bud_id integer,
	so_id bigint NOT NULL,
	relative_start_index integer NOT NULL,
	relative_end_index integer NOT NULL,
	contig_start_index integer NOT NULL,
	contig_end_index integer NOT NULL,
	seq_version timestamp,
	coord_version timestamp,
	genomerelease_id bigint,
	file_header varchar(200) NOT NULL,
	download_filename varchar(100) NOT NULL,
	file_id bigint,
	residues text NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT dnasubsequence_pk PRIMARY KEY (dnasubsequence_id)
) ;
COMMENT ON TABLE nex.dnasubsequence IS 'Current DNA sequence details for subfeatures.';
COMMENT ON COLUMN nex.dnasubsequence.file_id IS 'FK to FILE.FILE_ID.';
COMMENT ON COLUMN nex.dnasubsequence.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID of the parent feature.';
COMMENT ON COLUMN nex.dnasubsequence.residues IS 'DNA sequence.';
COMMENT ON COLUMN nex.dnasubsequence.dnasubsequence_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.dnasubsequence.contig_end_index IS 'Stop coordinate based on the contig.';
COMMENT ON COLUMN nex.dnasubsequence.contig_start_index IS 'Start coordinate based on the contig.';
COMMENT ON COLUMN nex.dnasubsequence.annotation_id IS 'FK to DNASEQUENCEANNOTATION.ANNOTATION_ID.';
COMMENT ON COLUMN nex.dnasubsequence.download_filename IS 'User interface download filename.';
COMMENT ON COLUMN nex.dnasubsequence.genomerelease_id IS 'FK to GENOMERELEASE.GENOMERELEASE_ID.';
COMMENT ON COLUMN nex.dnasubsequence.coord_version IS 'Date of the coordinate version.';
COMMENT ON COLUMN nex.dnasubsequence.so_id IS 'FK to the SO.SO_ID.';
COMMENT ON COLUMN nex.dnasubsequence.bud_id IS 'From BUD.SEQ.SEQ_NO.';
COMMENT ON COLUMN nex.dnasubsequence.file_header IS 'Fasta header line of the download file.';
COMMENT ON COLUMN nex.dnasubsequence.display_name IS 'Public display name.';
COMMENT ON COLUMN nex.dnasubsequence.relative_start_index IS 'Relative start coordinate based on the dbentity (feature).';
COMMENT ON COLUMN nex.dnasubsequence.seq_version IS 'Date of the sequence version.';
COMMENT ON COLUMN nex.dnasubsequence.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.dnasubsequence.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.dnasubsequence.relative_end_index IS 'Relative stop coordinate based on the dbentity (feature).';
ALTER TABLE nex.dnasubsequence ADD CONSTRAINT dnasubsequence_uk UNIQUE (annotation_id,dbentity_id,relative_start_index,relative_end_index);
CREATE INDEX dnasubsequence_genomerelease_fk_index ON nex.dnasubsequence (genomerelease_id);
CREATE INDEX dnasubsequence_so_fk_index ON nex.dnasubsequence (so_id);
CREATE INDEX dnasubsequence_dbentity_fk_index ON nex.dnasubsequence (dbentity_id);
CREATE INDEX dnasubsequence_file_fk_index ON nex.dnasubsequence (file_id);

DROP TABLE IF EXISTS nex.enzymeannotation CASCADE;
CREATE TABLE nex.enzymeannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	dbentity_id bigint NOT NULL,
	source_id bigint NOT NULL,
	taxonomy_id bigint NOT NULL,
	reference_id bigint,
	ec_id bigint NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT enzymeannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.enzymeannotation IS 'EC number annotations.';
COMMENT ON COLUMN nex.enzymeannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.enzymeannotation.ec_id IS 'FK to EC.EC_ID.';
COMMENT ON COLUMN nex.enzymeannotation.annotation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.enzymeannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.enzymeannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.enzymeannotation.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.enzymeannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.enzymeannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
ALTER TABLE nex.enzymeannotation ADD CONSTRAINT enzymeannotation_uk UNIQUE (dbentity_id,ec_id);
CREATE INDEX enzymeanno_ref_fk_index ON nex.enzymeannotation (reference_id);
CREATE INDEX enzymeanno_ec_fk_index ON nex.enzymeannotation (ec_id);
CREATE INDEX enzymeanno_source_fk_index ON nex.enzymeannotation (source_id);
CREATE INDEX enzymeanno_tax_fk_index ON nex.enzymeannotation (taxonomy_id);

DROP TABLE IF EXISTS nex.expressionannotation CASCADE;
CREATE TABLE nex.expressionannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('expression_seq'),
	dbentity_id bigint NOT NULL,
	source_id bigint NOT NULL,
	taxonomy_id bigint NOT NULL,
	reference_id bigint,
	datasetsample_id bigint NOT NULL,
	normalized_expression_value double precision NOT NULL,
    log_ratio_value double precision NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT expressionannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.expressionannotation IS 'High throughput gene expression annotations from GEO.';
COMMENT ON COLUMN nex.expressionannotation.datasetsample_id IS 'FK to DATASAMPLE.DATASAMPLE_ID.';
COMMENT ON COLUMN nex.expressionannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.expressionannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.expressionannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.expressionannotation.normalized_expression_value IS 'Expression value from SPELL where only 2 channel values are normalized.';
COMMENT ON COLUMN nex.expressionannotation.log_ratio_value IS 'Both 1 channel and 2 channel expression values are log2 normalized.';
COMMENT ON COLUMN nex.expressionannotation.annotation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.expressionannotation.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.expressionannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.expressionannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
ALTER TABLE nex.expressionannotation ADD CONSTRAINT expressionannotation_uk UNIQUE (datasetsample_id,dbentity_id);
CREATE INDEX expressionanno_source_fk_index ON nex.expressionannotation (source_id);
CREATE INDEX expressionanno_tax_fk_index ON nex.expressionannotation (taxonomy_id);
CREATE INDEX expressionanno_ref_fk_index ON nex.expressionannotation (reference_id);
CREATE INDEX expressionanno_dbentity_fk_index ON nex.expressionannotation (dbentity_id);

DROP TABLE IF EXISTS nex.geninteractionannotation CASCADE;
CREATE TABLE nex.geninteractionannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	dbentity1_id bigint NOT NULL,
	dbentity2_id bigint NOT NULL,
	source_id bigint NOT NULL,
	reference_id bigint NOT NULL,
	taxonomy_id bigint NOT NULL,
	phenotype_id bigint,
	biogrid_experimental_system varchar(100) NOT NULL,
	annotation_type varchar(20) NOT NULL,
	bait_hit varchar(10) NOT NULL,
    mutant_id bigint,
	description varchar(1000),
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT geninteractionannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.geninteractionannotation IS 'Genetic interaction annotations from BioGRID.';
COMMENT ON COLUMN nex.geninteractionannotation.biogrid_experimental_system IS 'Experimental system as defined by BIOGRID.';
COMMENT ON COLUMN nex.geninteractionannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.geninteractionannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.geninteractionannotation.dbentity2_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.geninteractionannotation.bait_hit IS 'Direction of the genetic interaction (Bait-Hit, Hit-Bait).';
COMMENT ON COLUMN nex.geninteractionannotation.annotation_type IS 'Type of annotation (high-throughput, manually curated).';
COMMENT ON COLUMN nex.geninteractionannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.geninteractionannotation.description IS 'Extended description or note.';
COMMENT ON COLUMN nex.geninteractionannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.geninteractionannotation.dbentity1_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.geninteractionannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.geninteractionannotation.phenotype_id IS 'FK to PHENOTYPE.PHENOTYPE_ID.';
COMMENT ON COLUMN nex.geninteractionannotation.mutant_id IS 'FK to APO.APO_ID.';
COMMENT ON COLUMN nex.geninteractionannotation.annotation_id IS 'Unique identifier (serial number).';
ALTER TABLE nex.geninteractionannotation ADD CONSTRAINT geninteractionannotation_uk UNIQUE (dbentity1_id,dbentity2_id,bait_hit,biogrid_experimental_system,reference_id);
ALTER TABLE nex.geninteractionannotation ADD CONSTRAINT geninteractionanno_bait_hit_ck CHECK (BAIT_HIT IN ('Bait-Hit', 'Hit-Bait'));
ALTER TABLE nex.geninteractionannotation ADD CONSTRAINT geninteractionanno_annotation_type_ck CHECK (ANNOTATION_TYPE IN ('high-throughput', 'manually curated'));
CREATE INDEX geninteractionanno_ref_fk_index ON nex.geninteractionannotation (reference_id);
CREATE INDEX geninteractionanno_pheno_fk_index ON nex.geninteractionannotation (phenotype_id);
CREATE INDEX geninteractionanno_dbentity2_index ON nex.geninteractionannotation (dbentity2_id);
CREATE INDEX geninteractionanno_tax_fk_index ON nex.geninteractionannotation (taxonomy_id);
CREATE INDEX geninteractionanno_source_fk_index ON nex.geninteractionannotation (source_id);
CREATE INDEX geninteractionanno_mutant_fk_index ON nex.geninteractionannotation (mutant_id);

DROP TABLE IF EXISTS nex.goannotation CASCADE;
CREATE TABLE nex.goannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	dbentity_id bigint NOT NULL,
	source_id bigint NOT NULL,
	taxonomy_id bigint NOT NULL,
	reference_id bigint NOT NULL,
	go_id bigint NOT NULL,
	eco_id bigint NOT NULL,
	annotation_type varchar(40) NOT NULL,
	go_qualifier varchar(100) NOT NULL,
	date_assigned timestamp NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT goannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.goannotation IS 'Gene Ontology annotations.';
COMMENT ON COLUMN nex.goannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.goannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.goannotation.annotation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.goannotation.eco_id IS 'FK to ECO.ECO_ID.';
COMMENT ON COLUMN nex.goannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.goannotation.annotation_type IS 'Type of GO annotation (high-throughput, manually curated, computational).';
COMMENT ON COLUMN nex.goannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.goannotation.go_id IS 'FK to GO.GO_ID.';
COMMENT ON COLUMN nex.goannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.goannotation.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.goannotation.go_qualifier IS 'Qualifier of the GO annotation (enables, involved in, part of, NOT, colocalizes_with, contributed_to).';
COMMENT ON COLUMN nex.goannotation.date_assigned IS 'Date the GO annotation was assigned or last reviewed.';
ALTER TABLE nex.goannotation ADD CONSTRAINT goannotation_uk UNIQUE (dbentity_id,go_id,eco_id,reference_id,annotation_type,go_qualifier,source_id);
ALTER TABLE nex.goannotation ADD CONSTRAINT goanno_qualifier_ck CHECK (GO_QUALIFIER IN ('located in','NOT located in','acts upstream of, positive effect',
	'does NOT act upstream of, positive effect','acts upstream of','does NOT act upstream of','colocalizes with','does NOT colocalize with','contributes to',
	'does NOT contribute to','acts upstream of, negative effect','does NOT act upstream of, negative effect','is active in','NOT active in','enables',
	'does NOT enable','part of','NOT part of','involved in','NOT involved in','acts upstream of or within','does NOT act upstream of or within',
	'acts upstream of or within, positive effect','does NOT act upstream of or within, positive effect','acts upstream of or within, negative effect',
	'does NOT act upstream of or within, negative effect'));
ALTER TABLE nex.goannotation ADD CONSTRAINT goanno_annotation_type_ck CHECK (ANNOTATION_TYPE IN ('high-throughput', 'manually curated', 'computational'));
CREATE INDEX goanno_eco_fk_index ON nex.goannotation (eco_id);
CREATE INDEX goanno_tax_fk_index ON nex.goannotation (taxonomy_id);
CREATE INDEX goanno_ref_fk_index ON nex.goannotation (reference_id);
CREATE INDEX goanno_source_fk_index ON nex.goannotation (source_id);
CREATE INDEX goanno_go_fk_index ON nex.goannotation (go_id);

DROP TABLE IF EXISTS nex.gosupportingevidence CASCADE;
CREATE TABLE nex.gosupportingevidence (
	gosupportingevidence_id bigint NOT NULL DEFAULT nextval('detail_seq'),
	annotation_id bigint NOT NULL,
	group_id bigint NOT NULL,
	dbxref_id varchar(40) NOT NULL,
	obj_url varchar(500) NOT NULL,
	evidence_type varchar(10) NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT gosupportingevidence_pk PRIMARY KEY (gosupportingevidence_id)
) ;
COMMENT ON TABLE nex.gosupportingevidence IS 'Evidence to support the GO annotation (column 8 of the GAF file).';
COMMENT ON COLUMN nex.gosupportingevidence.gosupportingevidence_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.gosupportingevidence.evidence_type IS 'How the supporting evidence is associated with the GO annotation (with, from).';
COMMENT ON COLUMN nex.gosupportingevidence.obj_url IS 'URL of the object (relative for local links or complete for external links).';
COMMENT ON COLUMN nex.gosupportingevidence.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.gosupportingevidence.annotation_id IS 'FK to GOANNOTATION.ANNOTATION_ID.';
COMMENT ON COLUMN nex.gosupportingevidence.group_id IS 'A grouping number.';
COMMENT ON COLUMN nex.gosupportingevidence.dbxref_id IS 'External cross reference identifier.';
COMMENT ON COLUMN nex.gosupportingevidence.date_created IS 'Date the record was entered into the database.';
ALTER TABLE nex.gosupportingevidence ADD CONSTRAINT gosupportingevidence_uk UNIQUE (annotation_id,dbxref_id,group_id,evidence_type);
ALTER TABLE nex.gosupportingevidence ADD CONSTRAINT gosupportingevidence_type_ck CHECK (EVIDENCE_TYPE IN ('with', 'from'));

DROP TABLE IF EXISTS nex.goextension CASCADE;
CREATE TABLE nex.goextension (
	goextension_id bigint NOT NULL DEFAULT nextval('detail_seq'),
	annotation_id bigint NOT NULL,
	group_id bigint NOT NULL,
	dbxref_id varchar(40) NOT NULL,
	obj_url varchar(500) NOT NULL,
	ro_id bigint NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT goextension_pk PRIMARY KEY (goextension_id)
) ;
COMMENT ON TABLE nex.goextension IS 'Cross references used to qualify or enhance the GO annotation (column 16 of the GAF file).';
COMMENT ON COLUMN nex.goextension.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.goextension.ro_id IS 'FK to RO.RO_ID.';
COMMENT ON COLUMN nex.goextension.annotation_id IS 'FK to GOANNOTATION.ANNOTATION_ID.';
COMMENT ON COLUMN nex.goextension.group_id IS 'A grouping number.';
COMMENT ON COLUMN nex.goextension.dbxref_id IS 'External cross reference identifier.';
COMMENT ON COLUMN nex.goextension.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.goextension.goextension_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.goextension.obj_url IS 'URL of the object (relative for local links or complete for external links).';
ALTER TABLE nex.goextension ADD CONSTRAINT goextension_uk UNIQUE (annotation_id,dbxref_id,group_id,ro_id);
CREATE INDEX goext_ro_fk_index ON nex.goextension (ro_id);

DROP TABLE IF EXISTS nex.goslimannotation CASCADE;
CREATE TABLE nex.goslimannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	dbentity_id bigint NOT NULL,
	source_id bigint NOT NULL,
	taxonomy_id bigint NOT NULL,
	reference_id bigint,
	goslim_id bigint NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT goslimannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.goslimannotation IS 'A subset of GO annotations that provide a broad overview, often used to summarize results.';
COMMENT ON COLUMN nex.goslimannotation.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.goslimannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.goslimannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.goslimannotation.goslim_id IS 'FK to GOSLIM.GOSLIM_ID.';
COMMENT ON COLUMN nex.goslimannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.goslimannotation.annotation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.goslimannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.goslimannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
ALTER TABLE nex.goslimannotation ADD CONSTRAINT goslimannotation_uk UNIQUE (dbentity_id,goslim_id);
CREATE INDEX goslimanno_tax_fk_index ON nex.goslimannotation (taxonomy_id);
CREATE INDEX goslimanno_source_fk_index ON nex.goslimannotation (source_id);
CREATE INDEX goslimanno_ref_fk_index ON nex.goslimannotation (reference_id);
CREATE INDEX goslimanno_goslim_fk_index ON nex.goslimannotation (goslim_id);

DROP TABLE IF EXISTS nex.literatureannotation CASCADE;
CREATE TABLE nex.literatureannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	reference_id bigint NOT NULL,
	source_id bigint NOT NULL,
	bud_id integer,
	taxonomy_id bigint NOT NULL,
	topic varchar(40) NOT NULL,
	dbentity_id bigint,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT literatureannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.literatureannotation IS 'Literature topics or categories assigned to references.';
COMMENT ON COLUMN nex.literatureannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.literatureannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.literatureannotation.topic IS 'Topic or category assigned to a reference (Additional Literature, Omics, Primary Literature, Reviews).';
COMMENT ON COLUMN nex.literatureannotation.annotation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.literatureannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.literatureannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.literatureannotation.bud_id IS 'From BUD.LIT_GUIDE.LIT_GUIDE_NO.';
COMMENT ON COLUMN nex.literatureannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.literatureannotation.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID.';
CREATE UNIQUE INDEX literatureannotation_uk on nex.literatureannotation (reference_id,topic,coalesce(dbentity_id,0));
ALTER TABLE nex.literatureannotation ADD CONSTRAINT literatureanno_topic_ck CHECK (TOPIC IN ('Additional Literature', 'Omics', 'Primary Literature', 'Reviews'));
CREATE INDEX literatureanno_dbentity_fk_index ON nex.literatureannotation (dbentity_id);
CREATE INDEX literatureanno_tax_fk_index ON nex.literatureannotation (taxonomy_id);
CREATE INDEX literatureanno_source_fk_index ON nex.literatureannotation (source_id);

DROP TABLE IF EXISTS nex.pathwayannotation CASCADE;
CREATE TABLE nex.pathwayannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	dbentity_id bigint NOT NULL,
	source_id bigint NOT NULL,
	taxonomy_id bigint NOT NULL,
	reference_id bigint,
	pathway_id bigint NOT NULL,
	ec_id bigint,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT pathwayannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.pathwayannotation IS 'Annotations associated with a pathway.';
COMMENT ON COLUMN nex.pathwayannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.pathwayannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.pathwayannotation.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.pathwayannotation.pathway_id IS 'FK to PATHWAYDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.pathwayannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.pathwayannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.pathwayannotation.annotation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.pathwayannotation.ec_id IS 'FK to EC.EC_ID.';
COMMENT ON COLUMN nex.pathwayannotation.date_created IS 'Date the record was entered into the database.';
CREATE UNIQUE INDEX pathwayannotation_uk_index on nex.pathwayannotation(dbentity_id,pathway_id,coalesce(reference_id,0),coalesce(ec_id,0));
CREATE INDEX pathwayanno_ref_fk_index ON nex.pathwayannotation (reference_id);
CREATE INDEX pathwayanno_pathway_fk_index ON nex.pathwayannotation (pathway_id);
CREATE INDEX pathwayanno_source_fk_index ON nex.pathwayannotation (source_id);
CREATE INDEX pathwayanno_ec_fk_index ON nex.pathwayannotation (ec_id);
CREATE INDEX pathwayanno_tax_fk_index ON nex.pathwayannotation (taxonomy_id);

DROP TABLE IF EXISTS nex.phenotypeannotation CASCADE;
CREATE TABLE nex.phenotypeannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	dbentity_id bigint NOT NULL,
	source_id bigint NOT NULL,
	bud_id integer,
	taxonomy_id bigint NOT NULL,
	reference_id bigint NOT NULL,
	phenotype_id bigint NOT NULL,
	experiment_id bigint NOT NULL,
	mutant_id bigint NOT NULL,
	allele_id bigint,
	reporter_id bigint,
	assay_id bigint,
	strain_name varchar(100),
    experiment_comment varchar(200),
    allele_comment varchar(200),
    reporter_comment varchar(200),
	details varchar(500),
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT phenotypeannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.phenotypeannotation IS 'Annotations associated with a phenotype.';
COMMENT ON COLUMN nex.phenotypeannotation.assay_id IS 'FK to OBI.OBI_ID.';
COMMENT ON COLUMN nex.phenotypeannotation.strain_name IS 'Additional information about the strain background.';
COMMENT ON COLUMN nex.phenotypeannotation.experiment_id IS 'FK to APO.APO_ID.';
COMMENT ON COLUMN nex.phenotypeannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.phenotypeannotation.allele_id IS 'FK to ALLELEDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.phenotypeannotation.bud_id IS 'From BUD.PHENO_ANNOTATION.PHENO_ANNOTATION_NO.';
COMMENT ON COLUMN nex.phenotypeannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.phenotypeannotation.reporter_id IS 'FK to REPORTER.REPORTER_ID.';
COMMENT ON COLUMN nex.phenotypeannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.phenotypeannotation.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.phenotypeannotation.details IS 'Details about the phenotype that are not related to the experimental conditions.';
COMMENT ON COLUMN nex.phenotypeannotation.mutant_id IS 'FK to APO.APO_ID.';
COMMENT ON COLUMN nex.phenotypeannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.phenotypeannotation.annotation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.phenotypeannotation.phenotype_id IS 'FK to PHENOTYPE.PHENOTYPE_ID.';
COMMENT ON COLUMN nex.phenotypeannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.phenotypeannotation.experiment_comment IS 'Additional description of the phenotype experiment.';
COMMENT ON COLUMN nex.phenotypeannotation.allele_comment IS 'Additional description of the phenotype allele.';
COMMENT ON COLUMN nex.phenotypeannotation.reporter_comment IS 'Additional description of the phenotype reporter.';
CREATE UNIQUE INDEX phenotypeannotation_uk_index on nex.phenotypeannotation(dbentity_id,phenotype_id,experiment_id,mutant_id,reference_id,taxonomy_id,coalesce(allele_id,0),coalesce(reporter_id,0),coalesce(strain_name,'0'),coalesce(experiment_comment,'0'),coalesce(allele_comment,'0'),coalesce(reporter_comment,'0'),coalesce(details,'0'));
CREATE INDEX phenotypeanno_phenotype_fk_index ON nex.phenotypeannotation (phenotype_id);
CREATE INDEX phenotypeanno_taxonomy_fk_index ON nex.phenotypeannotation (taxonomy_id);
CREATE INDEX phenotypeanno_ref_fk_index ON nex.phenotypeannotation (reference_id);
CREATE INDEX phenotypeanno_assay_fk_index ON nex.phenotypeannotation (assay_id);
CREATE INDEX phenotypeanno_experiment_fk_index ON nex.phenotypeannotation (experiment_id);
CREATE INDEX phenotypeanno_source_fk_index ON nex.phenotypeannotation (source_id);
CREATE INDEX phenotypeanno_reporter_fk_index ON nex.phenotypeannotation (reporter_id);
CREATE INDEX phenotypeanno_allele_fk_index ON nex.phenotypeannotation (allele_id);
CREATE INDEX phenotypeanno_mutant_fk_index ON nex.phenotypeannotation (mutant_id);

DROP TABLE IF EXISTS nex.phenotypeannotation_cond CASCADE;
CREATE TABLE nex.phenotypeannotation_cond (
	condition_id bigint NOT NULL DEFAULT nextval('condition_seq'),
	annotation_id bigint NOT NULL,
    group_id bigint NOT NULL,
	condition_class varchar(40) NOT NULL,
	condition_name varchar(500) NOT NULL,
	condition_value varchar(150),
	condition_unit varchar(25),
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT phenotypeannotation_cond_pk PRIMARY KEY (condition_id)
) ;
COMMENT ON TABLE nex.phenotypeannotation_cond IS 'Conditions associated with a phenotype annotation.';
COMMENT ON COLUMN nex.phenotypeannotation_cond.condition_unit IS 'Unit associated with a numerical condition value (C, hr, %, mM, etc.).';
COMMENT ON COLUMN nex.phenotypeannotation_cond.condition_value IS 'Value of the condition, often numeric.';
COMMENT ON COLUMN nex.phenotypeannotation_cond.condition_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.phenotypeannotation_cond.condition_name IS 'Specific name of the condition.';
COMMENT ON COLUMN nex.phenotypeannotation_cond.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.phenotypeannotation_cond.condition_class IS 'Type of the condition (Temperature, Chemical, Media, Phase, etc.).';
COMMENT ON COLUMN nex.phenotypeannotation_cond.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.phenotypeannotation_cond.annotation_id IS 'FK to PHENOTYPEANNOTATION.ANNOTATION_ID.';
COMMENT ON COLUMN nex.phenotypeannotation_cond.group_id IS 'A grouping number.';
CREATE UNIQUE INDEX phenotypeannotation_cond_uk_index on nex.phenotypeannotation_cond(annotation_id,group_id,condition_class,condition_name,coalesce(condition_value,'0'));
ALTER TABLE nex.phenotypeannotation_cond ADD CONSTRAINT phenotypeannocond_class_ck CHECK (CONDITION_CLASS IN ('assay', 'media', 'phase', 'radiation', 'temperature', 'treatment', 'chemical'));
CREATE INDEX phenotypeannocond_condition_name_index ON nex.phenotypeannotation_cond (condition_name);

DROP TABLE IF EXISTS nex.physinteractionannotation CASCADE;
CREATE TABLE nex.physinteractionannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	dbentity1_id bigint NOT NULL,
	dbentity2_id bigint NOT NULL,
	source_id bigint NOT NULL,
	reference_id bigint NOT NULL,
	taxonomy_id bigint NOT NULL,
	psimod_id bigint,
	biogrid_experimental_system varchar(100) NOT NULL,
	annotation_type varchar(20) NOT NULL,
	bait_hit varchar(10) NOT NULL,
	description varchar(1000),
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT physinteractionannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.physinteractionannotation IS 'Physical interaction annotations from BioGRID.';
COMMENT ON COLUMN nex.physinteractionannotation.annotation_type IS 'Type of annotation (high-throughput, manually curated).';
COMMENT ON COLUMN nex.physinteractionannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.physinteractionannotation.annotation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.physinteractionannotation.dbentity1_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.physinteractionannotation.description IS 'Extended description or note.';
COMMENT ON COLUMN nex.physinteractionannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.physinteractionannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.physinteractionannotation.biogrid_experimental_system IS 'Experimental system as defined by BIOGRID.';
COMMENT ON COLUMN nex.physinteractionannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.physinteractionannotation.psimod_id IS 'FK to PSIMOD.PSIMOD_ID.';
COMMENT ON COLUMN nex.physinteractionannotation.bait_hit IS 'Direction of the genetic interaction (Bait-Hit, Hit-Bait).';
COMMENT ON COLUMN nex.physinteractionannotation.dbentity2_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.physinteractionannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
ALTER TABLE nex.physinteractionannotation ADD CONSTRAINT physinteractionannotation_uk UNIQUE (dbentity1_id,dbentity2_id,bait_hit,biogrid_experimental_system,reference_id);
ALTER TABLE nex.physinteractionannotation ADD CONSTRAINT physinteractionanno_annotation_type_ck CHECK (ANNOTATION_TYPE IN ('high-throughput', 'manually curated'));
ALTER TABLE nex.physinteractionannotation ADD CONSTRAINT physinteractionanno_bait_hit_ck CHECK (BAIT_HIT IN ('Bait-Hit', 'Hit-Bait'));
CREATE INDEX physinteractionanno_psimod_fk_index ON nex.physinteractionannotation (psimod_id);
CREATE INDEX physinteractionanno_dbentity2_index ON nex.physinteractionannotation (dbentity2_id);
CREATE INDEX physinteractionanno_ref_fk_index ON nex.physinteractionannotation (reference_id);
CREATE INDEX physinteractionanno_tax_fk_index ON nex.physinteractionannotation (taxonomy_id);
CREATE INDEX physinteractionanno_source_fk_index ON nex.physinteractionannotation (source_id);

DROP TABLE IF EXISTS nex.posttranslationannotation CASCADE;
CREATE TABLE nex.posttranslationannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	dbentity_id bigint NOT NULL,
	source_id bigint NOT NULL,
	taxonomy_id bigint NOT NULL,
	reference_id bigint NOT NULL,
	site_index integer NOT NULL,
	site_residue varchar(1) NOT NULL,
	psimod_id bigint NOT NULL,
	modifier_id bigint,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT posttranslationannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.posttranslationannotation IS 'Post-translational protein modification annotations.';
COMMENT ON COLUMN nex.posttranslationannotation.annotation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.posttranslationannotation.modifier_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.posttranslationannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.posttranslationannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.posttranslationannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.posttranslationannotation.site_residue IS 'Residue of the PTM.';
COMMENT ON COLUMN nex.posttranslationannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.posttranslationannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.posttranslationannotation.site_index IS 'Start coordinate of the PTM.';
COMMENT ON COLUMN nex.posttranslationannotation.psimod_id IS 'FK to PSIMOD.PSIMOD_ID.';
COMMENT ON COLUMN nex.posttranslationannotation.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID.';
CREATE UNIQUE INDEX posttranslationannotation_uk_index on nex.posttranslationannotation(dbentity_id,psimod_id,site_residue,site_index,reference_id,coalesce(modifier_id,0));
CREATE INDEX posttranslationanno_ref_fk_index ON nex.posttranslationannotation (reference_id);
CREATE INDEX posttranslationanno_tax_fk_index ON nex.posttranslationannotation (taxonomy_id);
CREATE INDEX posttranslationanno_modifier_fk_index ON nex.posttranslationannotation (modifier_id);
CREATE INDEX posttranslationanno_source_fk_index ON nex.posttranslationannotation (source_id);
CREATE INDEX posttranslationanno_psimod_fk_index ON nex.posttranslationannotation (psimod_id);

DROP TABLE IF EXISTS nex.proteinabundanceannotation CASCADE;
CREATE TABLE nex.proteinabundanceannotation (
    annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
    dbentity_id bigint NOT NULL,
    source_id bigint NOT NULL,
    taxonomy_id bigint NOT NULL,
    reference_id bigint NOT NULL,
    original_reference_id bigint NOT NULL,
    data_value integer NOT NULL,
    data_unit varchar(20) NOT NULL,
    assay_id bigint NOT NULL,
    media_id bigint NOT NULL,
    fold_change numeric,
    chemical_id bigint,
    concentration_value numeric,
    concentration_unit varchar(20),
    time_value integer,
    time_unit varchar(20),
    process_id bigint,
    date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
    created_by varchar(12) NOT NULL,
    CONSTRAINT proteinabundanceannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.proteinabundanceannotation IS 'Protein abundance scores normalized across 21 experiments by Ho et al. (2018) PMID:29361465.';
COMMENT ON COLUMN nex.proteinabundanceannotation.annotation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.proteinabundanceannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.proteinabundanceannotation.original_reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.proteinabundanceannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.proteinabundanceannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.proteinabundanceannotation.dbentity_id IS 'FK to LOCUSDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.proteinabundanceannotation.data_value IS 'Normalized protein abundance data value.';
COMMENT ON COLUMN nex.proteinabundanceannotation.data_unit IS 'Units of the protein abundance data value (molecules/cell).';
COMMENT ON COLUMN nex.proteinabundanceannotation.assay_id IS 'FK to ECO.ECO_ID.';
COMMENT ON COLUMN nex.proteinabundanceannotation.media_id IS 'FK to EFO.EFO_ID.';
COMMENT ON COLUMN nex.proteinabundanceannotation.fold_change IS 'Fold change from data value after treatment.';
COMMENT ON COLUMN nex.proteinabundanceannotation.chemical_id IS 'FK to CHEBI.CHEBI_ID.';
COMMENT ON COLUMN nex.proteinabundanceannotation.concentration_value IS 'Chemical concentration data value.';
COMMENT ON COLUMN nex.proteinabundanceannotation.concentration_unit IS 'Units of the chemical concentration data value.';
COMMENT ON COLUMN nex.proteinabundanceannotation.time_value IS 'Treatment time value.';
COMMENT ON COLUMN nex.proteinabundanceannotation.time_unit IS 'Units of treatment time value (d,hr,min).';
COMMENT ON COLUMN nex.proteinabundanceannotation.process_id IS 'FK to GO.GO_ID.';
COMMENT ON COLUMN nex.proteinabundanceannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.proteinabundanceannotation.created_by IS 'Username of the person who entered the record into the database.';
ALTER TABLE nex.proteinabundanceannotation ADD CONSTRAINT proteinabundanceannotation_uk UNIQUE (dbentity_id,original_reference_id,taxonomy_id,assay_id,media_id,chemical_id,process_id);
ALTER TABLE nex.proteinabundanceannotation ADD CONSTRAINT proteinabundanceanno_dataunit_ck CHECK (DATA_UNIT IN ('molecules/cell'));
ALTER TABLE nex.proteinabundanceannotation ADD CONSTRAINT proteinabundanceanno_timeunit_ck CHECK (TIME_UNIT IN ('d','hr','min'));
CREATE INDEX proteinabundanceanno_ref_fk_index ON nex.proteinabundanceannotation (reference_id);
CREATE INDEX proteinabundanceanno_origref_fk_index ON nex.proteinabundanceannotation (original_reference_id);
CREATE INDEX proteinabundanceanno_tax_fk_index ON nex.proteinabundanceannotation (taxonomy_id);
CREATE INDEX proteinabundanceanno_source_fk_index ON nex.proteinabundanceannotation (source_id);
CREATE INDEX proteinabundanceanno_assay_fk_index ON nex.proteinabundanceannotation (assay_id);
CREATE INDEX proteinabundanceanno_media_fk_index ON nex.proteinabundanceannotation (media_id);
CREATE INDEX proteinabundanceanno_chemical_fk_index ON nex.proteinabundanceannotation (chemical_id);
CREATE INDEX proteinabundanceanno_process_fk_index ON nex.proteinabundanceannotation (process_id);

DROP TABLE IF EXISTS nex.proteindomainannotation CASCADE;
CREATE TABLE nex.proteindomainannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	dbentity_id bigint NOT NULL,
	source_id bigint NOT NULL,
	taxonomy_id bigint NOT NULL,
	reference_id bigint,
	proteindomain_id bigint NOT NULL,
	start_index integer NOT NULL,
	end_index integer NOT NULL,
	date_of_run timestamp NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT proteindomainannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.proteindomainannotation IS 'Protein domains as predicted by InterProScan.';
COMMENT ON COLUMN nex.proteindomainannotation.end_index IS 'End coordinate of the protein domain relative to the locus.';
COMMENT ON COLUMN nex.proteindomainannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.proteindomainannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.proteindomainannotation.date_of_run IS 'When the InterProScan analysis was run.';
COMMENT ON COLUMN nex.proteindomainannotation.annotation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.proteindomainannotation.proteindomain_id IS 'FK to PROTEINDOMAIN.PROTEINDOMAIN_ID.';
COMMENT ON COLUMN nex.proteindomainannotation.start_index IS 'Start coordinate of the protein domain relative to the locus.';
COMMENT ON COLUMN nex.proteindomainannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.proteindomainannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.proteindomainannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.proteindomainannotation.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID.';
ALTER TABLE nex.proteindomainannotation ADD CONSTRAINT proteindomainannotation_uk UNIQUE (dbentity_id,proteindomain_id,start_index,end_index);
CREATE INDEX proteindomainanno_tax_fk_index ON nex.proteindomainannotation (taxonomy_id);
CREATE INDEX proteindomainanno_ref_fk_index ON nex.proteindomainannotation (reference_id);
CREATE INDEX proteindomainanno_source_fk_index ON nex.proteindomainannotation (source_id);
CREATE INDEX proteindomainanno_domain_fk_index ON nex.proteindomainannotation (proteindomain_id);

DROP TABLE IF EXISTS nex.proteinexptannotation CASCADE;
CREATE TABLE nex.proteinexptannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	dbentity_id bigint NOT NULL,
	source_id bigint NOT NULL,
	reference_id bigint NOT NULL,
	taxonomy_id bigint NOT NULL,
	experiment_type varchar(40) NOT NULL,
	data_value varchar(25) NOT NULL,
	data_unit varchar(40) NOT NULL,
	assay_id bigint,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT proteinexptannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.proteinexptannotation IS 'Protein experiment data gathered from literature.';
COMMENT ON COLUMN nex.proteinexptannotation.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.proteinexptannotation.assay_id IS 'FK to OBI.OBI_ID.';
COMMENT ON COLUMN nex.proteinexptannotation.data_unit IS 'Units for the protein experimental value.';
COMMENT ON COLUMN nex.proteinexptannotation.data_value IS 'Protein experimental value.';
COMMENT ON COLUMN nex.proteinexptannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.proteinexptannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.proteinexptannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.proteinexptannotation.experiment_type IS 'Type of protein experiment (abundance, localization).';
COMMENT ON COLUMN nex.proteinexptannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.proteinexptannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.proteinexptannotation.annotation_id IS 'Unique identifier (serial number).';
ALTER TABLE nex.proteinexptannotation ADD CONSTRAINT proteinexptannotation_uk UNIQUE (dbentity_id,reference_id,experiment_type);
ALTER TABLE nex.proteinexptannotation ADD CONSTRAINT proteinexptanno_type_ck CHECK (EXPERIMENT_TYPE IN ('abundance', 'localization','half-life'));
CREATE INDEX proteinexptanno_source_fk_index ON nex.proteinexptannotation (source_id);
CREATE INDEX proteinexptanno_tax_fk_index ON nex.proteinexptannotation (taxonomy_id);
CREATE INDEX proteinexptanno_ref_fk_index ON nex.proteinexptannotation (reference_id);
CREATE INDEX proteinexptanno_assay_fk_index ON nex.proteinexptannotation (assay_id);

DROP TABLE IF EXISTS nex.proteinexptannotation_cond CASCADE;
CREATE TABLE nex.proteinexptannotation_cond (
	condition_id bigint NOT NULL DEFAULT nextval('condition_seq'),
	annotation_id bigint NOT NULL,
	condition_class varchar(40) NOT NULL,
	condition_name varchar(500) NOT NULL,
	condition_value varchar(25),
	condition_unit varchar(25),
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT proteinexptannotation_cond_pk PRIMARY KEY (condition_id)
) ;
COMMENT ON TABLE nex.proteinexptannotation_cond IS 'Conditions associated with a protein experiment annotation.';
COMMENT ON COLUMN nex.proteinexptannotation_cond.condition_value IS 'Value of the condition, often numeric.';
COMMENT ON COLUMN nex.proteinexptannotation_cond.condition_name IS 'Specific name of the condition.';
COMMENT ON COLUMN nex.proteinexptannotation_cond.condition_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.proteinexptannotation_cond.condition_unit IS 'Unit associated with a numerical condition value (C, hr, %, mM, etc.).';
COMMENT ON COLUMN nex.proteinexptannotation_cond.annotation_id IS 'FK to PROTEINEXPTANNOTATION.ANNOTATION_ID.';
COMMENT ON COLUMN nex.proteinexptannotation_cond.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.proteinexptannotation_cond.condition_class IS 'Type of the condition (Temperature, Chemical, Media, Phase, etc.).';
COMMENT ON COLUMN nex.proteinexptannotation_cond.date_created IS 'Date the record was entered into the database.';
CREATE UNIQUE INDEX proteinexptannotation_cond_uk_index on nex.proteinexptannotation_cond(annotation_id,condition_class,condition_name,coalesce(condition_value,'0'));

DROP TABLE IF EXISTS nex.proteinsequenceannotation CASCADE;
CREATE TABLE nex.proteinsequenceannotation (
	annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	dbentity_id bigint NOT NULL,
	source_id bigint NOT NULL,
	taxonomy_id bigint NOT NULL,
	reference_id bigint,
	bud_id integer,
	contig_id bigint NOT NULL,
	seq_version timestamp,
	genomerelease_id bigint,
	file_header varchar(200) NOT NULL,
	download_filename varchar(100) NOT NULL,
	file_id bigint,
	residues text NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT proteinsequenceannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.proteinsequenceannotation IS 'Current protein sequence information.';
COMMENT ON COLUMN nex.proteinsequenceannotation.download_filename IS 'User interface download filename.';
COMMENT ON COLUMN nex.proteinsequenceannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.proteinsequenceannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.proteinsequenceannotation.annotation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.proteinsequenceannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.proteinsequenceannotation.seq_version IS 'Date of the protein sequence release.';
COMMENT ON COLUMN nex.proteinsequenceannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.proteinsequenceannotation.bud_id IS 'From BUD.PROTEIN.INFO.';
COMMENT ON COLUMN nex.proteinsequenceannotation.file_header IS 'Fasta header line of the download file.';
COMMENT ON COLUMN nex.proteinsequenceannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.proteinsequenceannotation.genomerelease_id IS 'FK to GENOMERELEASE.GENOMERELEASE_ID.';
COMMENT ON COLUMN nex.proteinsequenceannotation.residues IS 'Current sequence of the protein.';
COMMENT ON COLUMN nex.proteinsequenceannotation.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.proteinsequenceannotation.contig_id IS 'FK to CONTIG.CONTIG_ID.';
COMMENT ON COLUMN nex.proteinsequenceannotation.file_id IS 'FK to FILE.FILE_ID.';
ALTER TABLE nex.proteinsequenceannotation ADD CONSTRAINT proteinsequenceannotation_uk UNIQUE (dbentity_id,taxonomy_id,contig_id);
CREATE INDEX proteinsequenceanno_genomerelease_fk_index ON nex.proteinsequenceannotation (genomerelease_id);
CREATE INDEX proteinsequenceanno_tax_fk_index ON nex.proteinsequenceannotation (taxonomy_id);
CREATE INDEX proteinsequenceanno_ref_fk_index ON nex.proteinsequenceannotation (reference_id);
CREATE INDEX proteinsequenceanno_source_fk_index ON nex.proteinsequenceannotation (source_id);
CREATE INDEX proteinsequenceanno_contig_fk_index ON nex.proteinsequenceannotation (contig_id);

DROP TABLE IF EXISTS nex.proteinsequence_detail CASCADE;
CREATE TABLE nex.proteinsequence_detail (
	detail_id bigint NOT NULL DEFAULT nextval('detail_seq'),
	annotation_id bigint NOT NULL,
	molecular_weight numeric NOT NULL,
	protein_length bigint NOT NULL,
	n_term_seq varchar(10) NOT NULL,
	c_term_seq varchar(10) NOT NULL,
	pi numeric,
	cai numeric,
	codon_bias numeric,
	fop_score numeric,
	gravy_score numeric,
	aromaticity_score numeric,
	aliphatic_index numeric,
	instability_index numeric,
	ala integer NOT NULL,
	arg integer NOT NULL,
	asn integer NOT NULL,
	asp integer NOT NULL,
	cys integer NOT NULL,
	gln integer NOT NULL,
	glu integer NOT NULL,
	gly integer NOT NULL,
	his integer NOT NULL,
	ile integer NOT NULL,
	leu integer NOT NULL,
	lys integer NOT NULL,
	met integer NOT NULL,
	phe integer NOT NULL,
	pro integer NOT NULL,
	ser integer NOT NULL,
	thr integer NOT NULL,
	trp integer NOT NULL,
	tyr integer NOT NULL,
	val integer NOT NULL,
	hydrogen integer,
	sulfur integer,
	nitrogen integer,
	oxygen integer,
	carbon integer,
	no_cys_ext_coeff integer,
	all_cys_ext_coeff integer,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT proteinsequence_detail_pk PRIMARY KEY (detail_id)
) ;
COMMENT ON TABLE nex.proteinsequence_detail IS 'Properties of the protein sequence.';
COMMENT ON COLUMN nex.proteinsequence_detail.ala IS 'Number of alanines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.gln IS 'Number of glutamines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.cai IS 'Codon adaptation index.';
COMMENT ON COLUMN nex.proteinsequence_detail.codon_bias IS 'Codon bias of the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.molecular_weight IS 'Molecular weight of the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.nitrogen IS 'Number of nitrogen atoms in the protein atomic composition.';
COMMENT ON COLUMN nex.proteinsequence_detail.thr IS 'Number of thereonines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.protein_length IS 'Length of the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.proteinsequence_detail.gravy_score IS 'General average hydropathicity score for the hypothetical translated gene product.';
COMMENT ON COLUMN nex.proteinsequence_detail.all_cys_ext_coeff IS 'All Cys residues appear as half cystines.';
COMMENT ON COLUMN nex.proteinsequence_detail.phe IS 'Number of phenylalanines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.pro IS 'Number of prolines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.fop_score IS 'Frequency of optimal condons (ratio of optimal codons to synonymous codons).';
COMMENT ON COLUMN nex.proteinsequence_detail.gly IS 'Number of glycines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.glu IS 'Number of glutamic acids in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.oxygen IS 'Number of oxygen atoms in the protein atomic composition.';
COMMENT ON COLUMN nex.proteinsequence_detail.pi IS 'Isoelectric point of the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.instability_index IS 'Correlation between stability of a protein and its dipeptide composition.';
COMMENT ON COLUMN nex.proteinsequence_detail.aromaticity_score IS 'Frequency of aromatic amino acids (Phe, Tyr, Trp) in the hypothetical translated gene product.';
COMMENT ON COLUMN nex.proteinsequence_detail.lys IS 'Number of lysines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.asn IS 'Number of asparagines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.arg IS 'Number of arginines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.leu IS 'Number of leucines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.cys IS 'Number of cysteines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.detail_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.proteinsequence_detail.his IS 'Number of histidines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.hydrogen IS 'Number of hydrogen atoms in the protein atomic composition.';
COMMENT ON COLUMN nex.proteinsequence_detail.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.proteinsequence_detail.aliphatic_index IS 'Relative volume occupied by aliphatic side chains (alanine, valine, isoleucine, and leucine).';
COMMENT ON COLUMN nex.proteinsequence_detail.trp IS 'Number of tryptophans in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.ser IS 'Number of serines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.c_term_seq IS 'C terminal sequence of the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.n_term_seq IS 'N terminal sequence of the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.met IS 'Number of methionines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.asp IS 'Number of aspartic acids in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.sulfur IS 'Number of sulfur atoms in the protein atomic composition.';
COMMENT ON COLUMN nex.proteinsequence_detail.tyr IS 'Number of tyrosines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.no_cys_ext_coeff IS 'No Cys residues appear as half cystines.';
COMMENT ON COLUMN nex.proteinsequence_detail.val IS 'Number of valines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.annotation_id IS 'FK to PROTEINSEQUENCEANNOTATION.ANNOTATION_ID.';
COMMENT ON COLUMN nex.proteinsequence_detail.ile IS 'Number of isoleucines in the protein.';
COMMENT ON COLUMN nex.proteinsequence_detail.carbon IS 'Number of carbon atoms in the protein atomic composition.';
ALTER TABLE nex.proteinsequence_detail ADD CONSTRAINT proteinsequence_detail_uk UNIQUE (annotation_id);


DROP TABLE IF EXISTS nex.proteinsequencealignment CASCADE;
CREATE TABLE nex.proteinsequencealignment (
	alignment_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	locus_id bigint NOT NULL,
	display_name varchar(100) NOT NULL,
	aligned_sequence text NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT proteinsequencealignment_pk PRIMARY KEY (alignment_id)
) ;
COMMENT ON TABLE nex.proteinsequencealignment IS 'Multiple protein sequence alignment.';
COMMENT ON COLUMN nex.proteinsequencealignment.alignment_id IS 'FK to LOCUSDBENTITY.DBENTITY_ID';
COMMENT ON COLUMN nex.proteinsequencealignment.display_name IS 'Display Name e.g. YFL039C_S288C';
COMMENT ON COLUMN nex.proteinsequencealignment.aligned_sequence IS 'Aligned sequence.';
COMMENT ON COLUMN nex.proteinsequencealignment.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.proteinsequencealignment.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.proteinsequencealignment.alignment_id IS 'Unique identifier (serial number).';
ALTER TABLE nex.proteinsequencealignment ADD CONSTRAINT proteinsequencealignment_uk UNIQUE (display_name);
CREATE INDEX proteinsequencealignment_locus_fk_index ON nex.proteinsequencealignment (locus_id);


DROP TABLE IF EXISTS nex.regulationannotation CASCADE;
CREATE TABLE nex.regulationannotation (
    annotation_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
    target_id bigint NOT NULL,
    regulator_id bigint NOT NULL,
    source_id bigint NOT NULL,
    taxonomy_id bigint NOT NULL,
    reference_id bigint NOT NULL,
    eco_id bigint NOT NULL,
    annotation_type varchar(40) NOT NULL,
    regulator_type varchar(40) NOT NULL,
    regulation_type varchar(100) NOT NULL,
    direction varchar(10),
    happens_during bigint,
    date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
    created_by varchar(12) NOT NULL,
    CONSTRAINT regulationannotation_pk PRIMARY KEY (annotation_id)
) ;
COMMENT ON TABLE nex.regulationannotation IS 'Target and regulator annotation information.';
COMMENT ON COLUMN nex.regulationannotation.target_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.regulationannotation.regulation_type IS 'Type of regulation (transcription, RNA stability, protein activity, protein stability).';
COMMENT ON COLUMN nex.regulationannotation.reference_id IS 'FK to REFERENCEBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.regulationannotation.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.regulationannotation.happens_during IS 'FK to GO.GO_ID. Cell cycle phase of the regulation using Gene Ontology biological process terms.';
COMMENT ON COLUMN nex.regulationannotation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.regulationannotation.direction IS 'Direction (positive or negative) of the regulation.';
COMMENT ON COLUMN nex.regulationannotation.regulator_type IS 'Type of regulator (transcription factor, chromatin modifier, protein modifier, RNA binder, RNA modifier, protein binder).';
COMMENT ON COLUMN nex.regulationannotation.annotation_id IS 'Unique identifier (Oracle sequence).';
COMMENT ON COLUMN nex.regulationannotation.regulator_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.regulationannotation.eco_id IS 'FK to ECO.ECO_ID.';
COMMENT ON COLUMN nex.regulationannotation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.regulationannotation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.regulationannotation.annotation_type IS 'Type of regulation annotation (high-throughput, manually curated, computational).';
ALTER TABLE nex.regulationannotation ADD CONSTRAINT regulationanno_regulator_type_ck CHECK (REGULATOR_TYPE in ('transcription factor','chromatin modifier','protein modifier','RNA binder','RNA modifier','protein binder'));
ALTER TABLE nex.regulationannotation ADD CONSTRAINT regulationanno_regulation_type_ck CHECK (REGULATION_TYPE in ('transcription','RNA stability','protein activity','protein stability'));
ALTER TABLE nex.regulationannotation ADD CONSTRAINT regulationanno_annotation_type CHECK (ANNOTATION_TYPE IN ('high-throughput','manually curated','computational'));
CREATE UNIQUE INDEX regulationannotation_uk_index on nex.regulationannotation(target_id,regulator_id,taxonomy_id,reference_id,eco_id,regulator_type,regulation_type,annotation_type,coalesce(happens_during,0));
CREATE INDEX regulationanno_source_fk_index ON nex.regulationannotation (source_id);
CREATE INDEX regulationanno_tax_fk_index ON nex.regulationannotation (taxonomy_id);
CREATE INDEX regulationanno_regulator_fk_index ON nex.regulationannotation (regulator_id);
CREATE INDEX regulationanno_happpensduring_fk_index ON nex.regulationannotation (happens_during);
CREATE INDEX regulationanno_ref_fk_index ON nex.regulationannotation (reference_id);
CREATE INDEX regulationanno_eco_fk_index ON nex.regulationannotation (eco_id);


DROP TABLE IF EXISTS nex.sequencevariant CASCADE;
CREATE TABLE nex.sequencevariant (
	variant_id bigint NOT NULL DEFAULT nextval('annotation_seq'),
	locus_id bigint NOT NULL,
	seq_type varchar(50) NOT NULL,
	variant_type varchar(50) NOT NULL,
	snp_type varchar(50) NOT NULL,
	score integer NOT NULL,
	start_index integer NOT NULL,
	end_index integer NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT sequencevariant_pk PRIMARY KEY (variant_id)
) ;
COMMENT ON TABLE nex.sequencevariant IS 'Information needed for display of variant viewer.';
COMMENT ON COLUMN nex.sequencevariant.locus_id IS 'FK to LOCUSDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.sequencevariant.seq_type IS 'allowed type: DNA, protein, upstream IGR, downstream IGR';
COMMENT ON COLUMN nex.sequencevariant.variant_type IS 'allowed type: Deletion, Insertion, SNP';
COMMENT ON COLUMN nex.sequencevariant.snp_type IS 'allowed type: synonymous, nonsynonymous, intron, untranslatable, intergenic';
COMMENT ON COLUMN nex.sequencevariant.score IS 'Indicates number of strains with the variation.';
COMMENT ON COLUMN nex.sequencevariant.start_index IS 'where variation starts';
COMMENT ON COLUMN nex.sequencevariant.end_index IS 'where variation ends';
COMMENT ON COLUMN nex.sequencevariant.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.sequencevariant.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.sequencevariant.variant_id IS 'Unique identifier (serial number).';
ALTER TABLE nex.sequencevariant ADD CONSTRAINT sequencevariant_uk UNIQUE (locus_id,seq_type,snp_type, start_index, end_index);
ALTER TABLE nex.sequencevariant ADD CONSTRAINT sequencevariant_seqtype_ck CHECK (SEQ_TYPE IN ('DNA', 'protein', 'upstream IGR','downstream IGR'));
ALTER TABLE nex.sequencevariant ADD CONSTRAINT sequencevariant_varianttype_ck CHECK (VARIANT_TYPE IN ('Deletion', 'Insertion', 'SNP'));
ALTER TABLE nex.sequencevariant ADD CONSTRAINT sequencevariant_snptype_ck CHECK (SNP_TYPE IN ('synonymous', 'nonsynonymous', 'intron', 'untranslatable','intergenic'));
CREATE INDEX sequencevariant_locus_fk_index ON nex.sequencevariant (locus_id);
