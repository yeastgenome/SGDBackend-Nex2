-- Generated by Ora2Pg, the Oracle database Schema converter, version 17.4
-- Copyright 2000-2016 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=sgd-nex2-db.stanford.edu;sid=SGD

SET client_encoding TO 'UTF8';

\set ON_ERROR_STOP ON

-- Dbentity (Locus, Strain, File, Pathway, Reference)

DROP TABLE IF EXISTS nex.dbentity cascade;
CREATE TABLE nex.dbentity (
	dbentity_id bigint NOT NULL DEFAULT nextval('object_seq'),
	format_name varchar(100) NOT NULL,
	display_name varchar(500) NOT NULL,
	obj_url varchar(500) NOT NULL,
	source_id bigint NOT NULL,
	bud_id integer,
	sgdid varchar(20) NOT NULL,
	subclass varchar(40) NOT NULL,
	dbentity_status varchar(40) NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT dbentity_pk PRIMARY KEY (dbentity_id)
) ;
COMMENT ON TABLE nex.dbentity IS 'Primary objects that are the focus of curation. They are strain independent and require an SGDID.';
COMMENT ON COLUMN nex.dbentity.display_name IS 'Public display name.';
COMMENT ON COLUMN nex.dbentity.bud_id IS 'PK from BUD.FEATURE.FEATURE_NO.';
COMMENT ON COLUMN nex.dbentity.format_name IS 'Unique name to create download files.';
COMMENT ON COLUMN nex.dbentity.obj_url IS 'URL of the object (relative for local links or complete for external links).';
COMMENT ON COLUMN nex.dbentity.sgdid IS 'SGD accession identifier.';
COMMENT ON COLUMN nex.dbentity.dbentity_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.dbentity.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.dbentity.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.dbentity.dbentity_status IS 'Current state of the dbentity (Active, Merged, Deleted, Archived).';
COMMENT ON COLUMN nex.dbentity.subclass IS 'What object inherits from DBENTITY (DBENTITY, FILE, LOCUS, REFERENCE, STRAIN).';
COMMENT ON COLUMN nex.dbentity.date_created IS 'Date the record was entered into the database.';
ALTER TABLE nex.dbentity ADD CONSTRAINT dbentity_uk UNIQUE (format_name,subclass);
ALTER TABLE nex.dbentity ADD CONSTRAINT dbentity_subclass_ck CHECK (SUBCLASS IN ('FILE','LOCUS','REFERENCE','STRAIN', 'PATHWAY'));
ALTER TABLE nex.dbentity ADD CONSTRAINT dbentity_status_ck CHECK (DBENTITY_STATUS IN ('Active','Merged','Deleted','Archived'));
CREATE INDEX dbentity_source_fk_index ON nex.dbentity (source_id);
CREATE UNIQUE INDEX dbentity_sgdid_index ON nex.dbentity (sgdid);

DROP TABLE IF EXISTS nex.locusdbentity CASCADE; 
CREATE TABLE nex.locusdbentity (
	dbentity_id bigint NOT NULL DEFAULT nextval('object_seq'),
	systematic_name varchar(40) NOT NULL,
	gene_name varchar(20),
	qualifier varchar(40),
	genetic_position real,
	name_description varchar(100),
	headline varchar(70),
	description varchar(500),
	has_summary boolean NOT NULL,
	has_sequence boolean NOT NULL,
	has_history boolean NOT NULL,
	has_literature boolean NOT NULL,
	has_go boolean NOT NULL,
	has_phenotype boolean NOT NULL,
	has_interaction boolean NOT NULL,
	has_expression boolean NOT NULL,
	has_regulation boolean NOT NULL,
	has_protein boolean NOT NULL,
	has_sequence_section boolean NOT NULL,
    not_in_s288c boolean NOT NULL,
	CONSTRAINT locusdbentity_pk PRIMARY KEY (dbentity_id)
) ;
COMMENT ON TABLE nex.locusdbentity IS 'Features located on a sequence, that are associate with a locus. Inherits from DBENTITY.';
COMMENT ON COLUMN nex.locusdbentity.genetic_position IS 'Genetic position of the locus.';
COMMENT ON COLUMN nex.locusdbentity.qualifier IS 'Categorization of the gene (Verified, Uncharacterized, Dubious).';
COMMENT ON COLUMN nex.locusdbentity.gene_name IS 'Registered gene name consisting of 3 letters followed by an integer (e.g., ADE12).';
COMMENT ON COLUMN nex.locusdbentity.headline IS 'An abbreviated version of the LOCUSDBENTITY.DESCRIPTION.';
COMMENT ON COLUMN nex.locusdbentity.has_summary IS 'Has a Locus web page.';
COMMENT ON COLUMN nex.locusdbentity.has_phenotype IS 'Has a Phenotype tab page.';
COMMENT ON COLUMN nex.locusdbentity.dbentity_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.locusdbentity.has_regulation IS 'Has a Regulation tab page.';
COMMENT ON COLUMN nex.locusdbentity.has_go IS 'Has a Gene Ontology tab page.';
COMMENT ON COLUMN nex.locusdbentity.description IS 'Brief description of the gene product or role the feature plays in the cell.';
COMMENT ON COLUMN nex.locusdbentity.has_protein IS 'Has a Protein tab page.';
COMMENT ON COLUMN nex.locusdbentity.has_sequence IS 'Has a Sequence tab page.';
COMMENT ON COLUMN nex.locusdbentity.has_expression IS 'Has an Expression tab page.';
COMMENT ON COLUMN nex.locusdbentity.systematic_name IS 'Unique name for the dbentity. Subfeatures have a number appended after the systematic name.';
COMMENT ON COLUMN nex.locusdbentity.has_literature IS 'Has a Literature tab page.';
COMMENT ON COLUMN nex.locusdbentity.has_history IS 'Has a History section on the Locus page.';
COMMENT ON COLUMN nex.locusdbentity.name_description IS 'Description of the gene name acronym.';
COMMENT ON COLUMN nex.locusdbentity.has_interaction IS 'Has an Interaction tab page.';
COMMENT ON COLUMN nex.locusdbentity.has_sequence_section IS 'Has a Sequence section on the Locus page.';
COMMENT ON COLUMN nex.locusdbentity.not_in_s288c IS 'If the feature is NOT found in S288C.';
ALTER TABLE nex.locusdbentity ADD CONSTRAINT locusdbentity_uk UNIQUE (systematic_name);
ALTER TABLE nex.locusdbentity ADD CONSTRAINT locusdbentity_qualifier_ck CHECK (QUALIFIER IN ('Verified','Uncharacterized','Dubious'));

DROP TABLE IF EXISTS nex.locus_reference CASCADE;
CREATE TABLE nex.locus_reference (
    locus_reference_id bigint NOT NULL DEFAULT nextval('link_seq'),
    locus_id bigint NOT NULL,
    reference_id bigint NOT NULL,
    reference_class varchar(40) NOT NULL,
    source_id bigint NOT NULL,
    date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
    created_by varchar(12) NOT NULL,
    CONSTRAINT locus_reference_pk PRIMARY KEY (locus_reference_id)
) ;
COMMENT ON TABLE nex.locus_reference IS 'References associated with a locus.';
COMMENT ON COLUMN nex.locus_reference.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.locus_reference.locus_id IS 'FK to LOCUSDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.locus_reference.locus_reference_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.locus_reference.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.locus_reference.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.locus_reference.reference_id IS 'FK to REFERENCEDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.locus_reference.reference_class IS 'The column in LOCUSDBENTITY that is associated with the reference.'; 
ALTER TABLE nex.locus_reference ADD CONSTRAINT locus_reference_uk UNIQUE (locus_id,reference_id,reference_class);
ALTER TABLE nex.locus_reference ADD CONSTRAINT locusreference_class_ck CHECK (REFERENCE_CLASS IN ('systematic_name','gene_name','qualifier','description','name_description'));
CREATE INDEX locusreference_source_fk_index ON nex.locus_reference (source_id);
CREATE INDEX locusreference_ref_fk_index ON nex.locus_reference (reference_id);

DROP TABLE IF EXISTS nex.locus_alias CASCADE; 
CREATE TABLE nex.locus_alias (
	alias_id bigint NOT NULL DEFAULT nextval('alias_seq'),
	display_name varchar(500) NOT NULL,
	obj_url varchar(500),
	source_id bigint NOT NULL,
	bud_id integer,
	locus_id bigint NOT NULL,
	has_external_id_section boolean NOT NULL,
	alias_type varchar(40) NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT locus_alias_pk PRIMARY KEY (alias_id)
) ;
COMMENT ON TABLE nex.locus_alias IS 'Other names, synonyms, or dbxrefs for a feature or gene.';
COMMENT ON COLUMN nex.locus_alias.has_external_id_section IS 'Whether the alias is displayed in the Protein tab External Identifier section.';
COMMENT ON COLUMN nex.locus_alias.display_name IS 'Public display name.';
COMMENT ON COLUMN nex.locus_alias.bud_id IS 'PK from BUD.ALIAS.ALIAS_NO or BUD.DBXREF.DBXREF_NO.';
COMMENT ON COLUMN nex.locus_alias.obj_url IS 'URL of the object (relative for local links or complete for external links).';
COMMENT ON COLUMN nex.locus_alias.locus_id IS 'FK to LOCUSDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.locus_alias.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.locus_alias.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.locus_alias.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.locus_alias.alias_type IS 'Type of alias or dbxref.';
COMMENT ON COLUMN nex.locus_alias.alias_id IS 'Unique identifier (serial number).';
ALTER TABLE nex.locus_alias ADD CONSTRAINT locus_alias_uk UNIQUE (locus_id,display_name,alias_type);
CREATE INDEX locusalias_source_fk_index ON nex.locus_alias (source_id);

DROP TABLE IF EXISTS nex.locusalias_reference CASCADE;
CREATE TABLE nex.locusalias_reference (
    locusalias_reference_id bigint NOT NULL DEFAULT nextval('link_seq'),
    alias_id bigint NOT NULL,
    reference_id bigint NOT NULL,
    source_id bigint NOT NULL,
    date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
    created_by varchar(12) NOT NULL,
    CONSTRAINT locusalias_reference_pk PRIMARY KEY (locusalias_reference_id)
) ;
COMMENT ON TABLE nex.locusalias_reference IS 'References associated with a locus alias.';
COMMENT ON COLUMN nex.locusalias_reference.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.locusalias_reference.alias_id IS 'FK to LOCUSALIAS.ALIAS_ID.';
COMMENT ON COLUMN nex.locusalias_reference.locusalias_reference_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.locusalias_reference.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.locusalias_reference.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.locusalias_reference.reference_id IS 'FK to REFERENCEDBENTITY.DBENTITY_ID.';
ALTER TABLE nex.locusalias_reference ADD CONSTRAINT locusalias_reference_uk UNIQUE (alias_id,reference_id);
CREATE INDEX locusaliasreference_source_fk_index ON nex.locusalias_reference (source_id);
CREATE INDEX locusaliasreference_ref_fk_index ON nex.locusalias_reference (reference_id);

DROP TABLE IF EXISTS nex.locus_relation CASCADE; 
CREATE TABLE nex.locus_relation (
	relation_id bigint NOT NULL DEFAULT nextval('relation_seq'),
	source_id bigint NOT NULL,
	bud_id integer,
	parent_id bigint NOT NULL,
	child_id bigint NOT NULL,
	ro_id bigint NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT locus_relation_pk PRIMARY KEY (relation_id)
) ;
COMMENT ON TABLE nex.locus_relation IS 'Relationship between two locus dbentities or features.';
COMMENT ON COLUMN nex.locus_relation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.locus_relation.relation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.locus_relation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.locus_relation.ro_id IS 'FK to RO.RO_ID.';
COMMENT ON COLUMN nex.locus_relation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.locus_relation.parent_id IS 'FK to LOCUSDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.locus_relation.bud_id IS 'PK from BUD.FEAT_RELATIONSHIP.FEAT_RELATIONSHIP_NO.';
COMMENT ON COLUMN nex.locus_relation.child_id IS 'FK to LOCUSDBENTITY.DBENTITY_ID.';
ALTER TABLE nex.locus_relation ADD CONSTRAINT locus_relation_uk UNIQUE (parent_id,child_id,ro_id);
CREATE INDEX locusrelation_child_fk_index ON nex.locus_relation (child_id);
CREATE INDEX locusrelation_ro_fk_index ON nex.locus_relation (ro_id);
CREATE INDEX locusrelation_source_fk_index ON nex.locus_relation (source_id);

DROP TABLE IF EXISTS nex.locusrelation_reference CASCADE;
CREATE TABLE nex.locusrelation_reference (
    locusrelation_reference_id bigint NOT NULL DEFAULT nextval('link_seq'),
    relation_id bigint NOT NULL,
    reference_id bigint NOT NULL,
    source_id bigint NOT NULL,
    date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
    created_by varchar(12) NOT NULL,
    CONSTRAINT locusrelation_reference_pk PRIMARY KEY (locusrelation_reference_id)
) ;
COMMENT ON TABLE nex.locusrelation_reference IS 'References associated with a locus relation.';
COMMENT ON COLUMN nex.locusrelation_reference.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.locusrelation_reference.relation_id IS 'FK to LOCUSRELATION.RELATION_ID.';
COMMENT ON COLUMN nex.locusrelation_reference.locusrelation_reference_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.locusrelation_reference.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.locusrelation_reference.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.locusrelation_reference.reference_id IS 'FK to REFERENCEDBENTITY.DBENTITY_ID.';
ALTER TABLE nex.locusrelation_reference ADD CONSTRAINT locusrelation_reference_uk UNIQUE (relation_id,reference_id);
CREATE INDEX locusrelationreference_source_fk_index ON nex.locusrelation_reference (source_id);
CREATE INDEX locusrelationreference_ref_fk_index ON nex.locusrelation_reference (reference_id);

DROP TABLE IF EXISTS nex.locus_url CASCADE; 
CREATE TABLE nex.locus_url (
	url_id bigint NOT NULL DEFAULT nextval('url_seq'),
	display_name varchar(500) NOT NULL,
	obj_url varchar(500) NOT NULL,
	source_id bigint NOT NULL,
	bud_id integer,
	locus_id bigint NOT NULL,
	url_type varchar(40) NOT NULL,
	placement varchar(100) NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT locus_url_pk PRIMARY KEY (url_id)
) ;
COMMENT ON TABLE nex.locus_url IS 'URLs associated with locus dbentities or features.';
COMMENT ON COLUMN nex.locus_url.display_name IS 'Public display name.';
COMMENT ON COLUMN nex.locus_url.bud_id IS 'PK from BUD.URL.URL_NO.';
COMMENT ON COLUMN nex.locus_url.url_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.locus_url.obj_url IS 'URL of the object (relative for local links or complete for external links).';
COMMENT ON COLUMN nex.locus_url.locus_id IS 'FK to LOCUSDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.locus_url.url_type IS 'Type of URL (Internal web service, External id, Systematic name, SGDID).';
COMMENT ON COLUMN nex.locus_url.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.locus_url.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.locus_url.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.locus_url.placement IS 'Location of the URL on the web page.';
ALTER TABLE nex.locus_url ADD CONSTRAINT locus_url_uk UNIQUE (locus_id,display_name,obj_url,placement);
ALTER TABLE nex.locus_url ADD CONSTRAINT locusurl_type_ck CHECK (URL_TYPE IN ('External id','SGDID','Systematic name','Internal web service'));
CREATE INDEX locusurl_source_fk_index ON nex.locus_url (source_id);

DROP TABLE IF EXISTS nex.locussummary CASCADE; 
CREATE TABLE nex.locussummary (
	summary_id bigint NOT NULL DEFAULT nextval('summary_seq'),
	source_id bigint NOT NULL,
	bud_id integer,
	locus_id bigint NOT NULL,
	summary_type varchar(40) NOT NULL,
	summary_order smallint NOT NULL DEFAULT 1,
	text text NOT NULL,
	html text NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT locussummary_pk PRIMARY KEY (summary_id)
) ;
COMMENT ON TABLE nex.locussummary IS 'Summaries or paragraphs associated with locus features.';
COMMENT ON COLUMN nex.locussummary.summary_order IS 'Order of summaries when composed of multiple paragraphs (default = 1).';
COMMENT ON COLUMN nex.locussummary.bud_id IS 'PK from BUD.PARAGRAPH.PARAGRAPH_NO.';
COMMENT ON COLUMN nex.locussummary.summary_type IS 'Type of summary (Gene, Function, Phenotype, Regulation).';
COMMENT ON COLUMN nex.locussummary.locus_id IS 'FK to LOCUSDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.locussummary.text IS 'Summary plain text.';
COMMENT ON COLUMN nex.locussummary.summary_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.locussummary.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.locussummary.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.locussummary.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.locussummary.html IS 'Summary HTML mark-up.';
ALTER TABLE nex.locussummary ADD CONSTRAINT locussummary_uk UNIQUE (locus_id,summary_type,summary_order);
ALTER TABLE nex.locussummary ADD CONSTRAINT locussummary_type_ck CHECK (SUMMARY_TYPE IN ('Gene','Function','Phenotype','Regulation'));
CREATE INDEX locussummary_source_fk_index ON nex.locussummary (source_id);

DROP TABLE IF EXISTS nex.locussummary_reference CASCADE; 
CREATE TABLE nex.locussummary_reference (
	summary_reference_id bigint NOT NULL DEFAULT nextval('link_seq'),
	summary_id bigint NOT NULL,
	reference_id bigint NOT NULL,
	reference_order smallint NOT NULL,
	source_id bigint NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT locussummary_reference_pk PRIMARY KEY (summary_reference_id)
) ;
COMMENT ON TABLE nex.locussummary_reference IS 'References associated with a locus summary.';
COMMENT ON COLUMN nex.locussummary_reference.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.locussummary_reference.summary_id IS 'FK to LOCUSSUMMARY.SUMMARY_ID.';
COMMENT ON COLUMN nex.locussummary_reference.summary_reference_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.locussummary_reference.reference_order IS 'Order of the references in the summary.';
COMMENT ON COLUMN nex.locussummary_reference.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.locussummary_reference.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.locussummary_reference.reference_id IS 'FK to REFERENCEDBENTITY.DBENTITY_ID.';
ALTER TABLE nex.locussummary_reference ADD CONSTRAINT locussummary_reference_uk UNIQUE (summary_id,reference_id);
CREATE INDEX locussummaryreference_source_fk_index ON nex.locussummary_reference (source_id);
CREATE INDEX locussummaryreference_ref_fk_index ON nex.locussummary_reference (reference_id);

DROP TABLE IF EXISTS nex.locusnote CASCADE;
CREATE TABLE nex.locusnote (
    note_id bigint NOT NULL DEFAULT nextval('note_seq'),
    source_id bigint NOT NULL,
    bud_id integer,
    locus_id bigint NOT NULL,
    note_class varchar(40) NOT NULL,
    note_type varchar(40) NOT NULL,
    note varchar(2000) NOT NULL,
    date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
    created_by varchar(12) NOT NULL,
    CONSTRAINT locusnote_pk PRIMARY KEY (note_id)
) ;
COMMENT ON TABLE nex.locusnote IS 'Historical and informative notes about loci and their sequences.';
COMMENT ON COLUMN nex.locusnote.bud_id IS 'From BUD.NOTE.NOTE_NO.';
COMMENT ON COLUMN nex.locusnote.note_type IS 'Type of note (Nomenclature history,Nomenclature conflict,Locus history,Alternative processing,Annotation change,Mapping,Proposed annotation change,Proposed sequence change,Sequence change).';
COMMENT ON COLUMN nex.locusnote.locus_id IS 'FK to LOCUSDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.locusnote.note_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.locusnote.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.locusnote.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.locusnote.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.locusnote.note_class IS 'The class of the note (Locus, Sequence).';
COMMENT ON COLUMN nex.locusnote.note IS 'Note or comment.';
ALTER TABLE nex.locusnote ADD CONSTRAINT locusnote_uk UNIQUE (locus_id,note_class, note_type, note);
ALTER TABLE nex.locusnote ADD CONSTRAINT locusnote_noteclass_ck CHECK (NOTE_CLASS IN ('Locus','Sequence'));
ALTER TABLE nex.locusnote ADD CONSTRAINT locusnote_type_ck CHECK (NOTE_TYPE IN ('Nomenclature history','Nomenclature conflict','Locus history','Name','Alternative processing','Annotation change','Mapping','Proposed annotation change','Proposed sequence change','Sequence change'));
CREATE INDEX locusnote_source_fk_index ON nex.locusnote (source_id);

DROP TABLE IF EXISTS nex.locusnote_reference CASCADE;
CREATE TABLE nex.locusnote_reference (
    note_reference_id bigint NOT NULL DEFAULT nextval('link_seq'),
    note_id bigint NOT NULL,
    reference_id bigint NOT NULL,
    source_id bigint NOT NULL,
    date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
    created_by varchar(12) NOT NULL,
    CONSTRAINT locusnote_reference_pk PRIMARY KEY (note_reference_id)
) ;
COMMENT ON TABLE nex.locusnote_reference IS 'References associated with a locus note.';
COMMENT ON COLUMN nex.locusnote_reference.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.locusnote_reference.note_id IS 'FK to LOCUSNOTE.NOTE_ID.';
COMMENT ON COLUMN nex.locusnote_reference.note_reference_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.locusnote_reference.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.locusnote_reference.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.locusnote_reference.reference_id IS 'FK to REFERENCEDBENTITY.DBENTITY_ID.';
ALTER TABLE nex.locusnote_reference ADD CONSTRAINT locusnote_reference_uk UNIQUE (note_id,reference_id);
CREATE INDEX locusnotereference_source_fk_index ON nex.locusnote_reference (source_id);
CREATE INDEX locusnotereference_ref_fk_index ON nex.locusnote_reference (reference_id);


DROP TABLE IF EXISTS nex.straindbentity CASCADE; 
CREATE TABLE nex.straindbentity (
	dbentity_id bigint NOT NULL DEFAULT nextval('object_seq'),
	taxonomy_id bigint NOT NULL,
	strain_type varchar(40) NOT NULL,
    headline varchar(70) NOT NULL,
	genotype varchar(500),
	genbank_id varchar(40),
	assembly_size integer,
	fold_coverage smallint,
	scaffold_number integer,
	longest_scaffold integer,
	scaffold_nfifty integer,
	feature_count integer,
	CONSTRAINT straindbentity_pk PRIMARY KEY (dbentity_id)
) ;
COMMENT ON TABLE nex.straindbentity IS 'A yeast strain which has sequence data. Inherits from DBENTITY';
COMMENT ON COLUMN nex.straindbentity.feature_count IS 'Number of features identified in this strain.';
COMMENT ON COLUMN nex.straindbentity.strain_type IS 'Strain designation assigned by SGD (Reference, Alternative Reference, Other).';
COMMENT ON COLUMN nex.straindbentity.assembly_size IS 'Total number of nucleotides in the assembly.';
COMMENT ON COLUMN nex.straindbentity.scaffold_number IS 'Number of scaffolds in the assembly.';
COMMENT ON COLUMN nex.straindbentity.dbentity_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.straindbentity.scaffold_nfifty IS 'Weighted median statistic such that 50% of the entire assembly is contained in scaffolds equal to or larger than this value';
COMMENT ON COLUMN nex.straindbentity.longest_scaffold IS 'Length of the longest scaffold.';
COMMENT ON COLUMN nex.straindbentity.headline IS 'A short description about the strain.';
COMMENT ON COLUMN nex.straindbentity.taxonomy_id IS 'FK to TAXONOMY.TAXONOMY_ID.';
COMMENT ON COLUMN nex.straindbentity.genbank_id IS 'GenBank accession ID of the strain (e.g., JRII00000000).';
COMMENT ON COLUMN nex.straindbentity.genotype IS 'Genotype of the strain.';
COMMENT ON COLUMN nex.straindbentity.fold_coverage IS 'Average number of reads per nucleotide in the assembly.';
ALTER TABLE nex.straindbentity ADD CONSTRAINT straindbentity_type_ck CHECK (STRAIN_TYPE IN ('Reference','Alternative Reference','Other'));
CREATE INDEX straindbentity_tax_fk_index ON nex.straindbentity (taxonomy_id);

DROP TABLE IF EXISTS nex.strain_url CASCADE; 
CREATE TABLE nex.strain_url (
	url_id bigint NOT NULL DEFAULT nextval('url_seq'),
	display_name varchar(500) NOT NULL,
	obj_url varchar(500) NOT NULL,
	source_id bigint NOT NULL,
	strain_id bigint NOT NULL,
	url_type varchar(40) NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT strain_url_pk PRIMARY KEY (url_id)
) ;
COMMENT ON TABLE nex.strain_url IS 'URLs associated with a strain.';
COMMENT ON COLUMN nex.strain_url.display_name IS 'Public display name.';
COMMENT ON COLUMN nex.strain_url.obj_url IS 'URL of the object (relative for local links or complete for external links).';
COMMENT ON COLUMN nex.strain_url.url_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.strain_url.url_type IS 'Type of URL (External id, Wiki, PubMed, GenBank, Download).';
COMMENT ON COLUMN nex.strain_url.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.strain_url.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.strain_url.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.strain_url.strain_id IS 'FK to STRAINDBENTITY.DBENTITY_ID.';
ALTER TABLE nex.strain_url ADD CONSTRAINT strain_url_uk UNIQUE (strain_id,display_name,url_type);
ALTER TABLE nex.strain_url ADD CONSTRAINT strainurl_type_ck CHECK (URL_TYPE IN ('Download','GenBank','PubMed','External id','Wiki'));
CREATE INDEX strainurl_source_fk_index ON nex.strain_url (source_id);

DROP TABLE IF EXISTS nex.strainsummary CASCADE; 
CREATE TABLE nex.strainsummary (
	summary_id bigint NOT NULL DEFAULT nextval('summary_seq'),
	source_id bigint NOT NULL,
	strain_id bigint NOT NULL,
	summary_type varchar(40) NOT NULL,
	text text NOT NULL,
	html text NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT strainsummary_pk PRIMARY KEY (summary_id)
) ;
COMMENT ON TABLE nex.strainsummary IS 'Summaries or paragraphs associated with strains.';
COMMENT ON COLUMN nex.strainsummary.summary_type IS 'Type of summary (Strain).';
COMMENT ON COLUMN nex.strainsummary.strain_id IS 'FK to STRAINDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.strainsummary.html IS 'Summary HTML mark-up.';
COMMENT ON COLUMN nex.strainsummary.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.strainsummary.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.strainsummary.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.strainsummary.summary_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.strainsummary.text IS 'Summary plain text.';
ALTER TABLE nex.strainsummary ADD CONSTRAINT strainsummary_uk UNIQUE (strain_id,summary_type);
ALTER TABLE nex.strainsummary ADD CONSTRAINT strainsummary_type_ck CHECK (SUMMARY_TYPE IN ('Strain'));
CREATE INDEX strainsummary_source_fk_index ON nex.strainsummary (source_id);

DROP TABLE IF EXISTS nex.strainsummary_reference CASCADE; 
CREATE TABLE nex.strainsummary_reference (
	summary_reference_id bigint NOT NULL DEFAULT nextval('link_seq'),
	summary_id bigint NOT NULL,
	reference_id bigint NOT NULL,
	reference_order smallint NOT NULL,
	source_id bigint NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT strainsummary_reference_pk PRIMARY KEY (summary_reference_id)
) ;
COMMENT ON TABLE nex.strainsummary_reference IS 'References associatd with a strain summary.';
COMMENT ON COLUMN nex.strainsummary_reference.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.strainsummary_reference.reference_order IS 'Order of the references in the summary.';
COMMENT ON COLUMN nex.strainsummary_reference.summary_id IS 'FK to STRAINSUMMARY.SUMMARY_ID.';
COMMENT ON COLUMN nex.strainsummary_reference.summary_reference_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.strainsummary_reference.reference_id IS 'FK to REFERENCEDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.strainsummary_reference.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.strainsummary_reference.created_by IS 'Username of the person who entered the record into the database.';
ALTER TABLE nex.strainsummary_reference ADD CONSTRAINT strainsummary_reference_uk UNIQUE (summary_id,reference_id);
CREATE INDEX strainsummaryreference_ref_fk_index ON nex.strainsummary_reference (reference_id);
CREATE INDEX strainsummaryreference_source_fk_index ON nex.strainsummary_reference (source_id);

DROP TABLE IF EXISTS nex.pathwaydbentity CASCADE; 
CREATE TABLE nex.pathwaydbentity (
	dbentity_id bigint NOT NULL DEFAULT nextval('object_seq'),
	biocyc_id varchar(40) NOT NULL
	CONSTRAINT pathwaydbentity_pk PRIMARY KEY (dbentity_id)
) ;
COMMENT ON TABLE nex.pathwaydbentity IS 'A biochemical pathway. Inherits from DBENTITY';
COMMENT ON COLUMN nex.pathwaydbentity.dbentity_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.pathwaydbentity.biocyc_id IS 'Unique identifier for the pathway from BioCyc.';
alter table nex.pathwaydbentity add constraint pathwaydbentity_uk UNIQUE (biocyc_id);

DROP TABLE IF EXISTS nex.pathway_alias CASCADE; 
CREATE TABLE nex.pathway_alias (
	alias_id bigint NOT NULL DEFAULT nextval('alias_seq'),
	display_name varchar(500) NOT NULL,
	source_id bigint NOT NULL,
	pathway_id bigint NOT NULL,
	alias_type varchar(40) NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT pathway_alias_pk PRIMARY KEY (alias_id)
) ;
COMMENT ON TABLE nex.pathway_alias IS 'Other names, synonyms, or dbxrefs for a pathway.';
COMMENT ON COLUMN nex.pathway_alias.display_name IS 'Public display name.';
COMMENT ON COLUMN nex.pathway_alias.alias_type IS 'Type of alias or dbxref (Synonym).';
COMMENT ON COLUMN nex.pathway_alias.alias_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.pathway_alias.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.pathway_alias.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.pathway_alias.pathway_id IS 'FK to PATHWAYDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.pathway_alias.created_by IS 'Username of the person who entered the record into the database.';
ALTER TABLE nex.pathway_alias ADD CONSTRAINT pathway_alias_uk UNIQUE (pathway_id,display_name,alias_type);
ALTER TABLE nex.pathway_alias ADD CONSTRAINT pathwayalias_type_ck CHECK (ALIAS_TYPE IN ('Synonym'));
CREATE INDEX pathwayalias_source_fk_index ON nex.pathway_alias (source_id);

DROP TABLE IF EXISTS nex.pathway_url CASCADE; 
CREATE TABLE nex.pathway_url (
	url_id bigint NOT NULL DEFAULT nextval('url_seq'),
	display_name varchar(500) NOT NULL,
	obj_url varchar(500) NOT NULL,
	source_id bigint NOT NULL,
	pathway_id bigint NOT NULL,
	url_type varchar(40) NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT pathway_url_pk PRIMARY KEY (url_id)
) ;
COMMENT ON TABLE nex.pathway_url IS 'URLs associated with a pathway.';
COMMENT ON COLUMN nex.pathway_url.obj_url IS 'URL of the object (relative for local links or complete for external links).';
COMMENT ON COLUMN nex.pathway_url.url_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.pathway_url.display_name IS 'Public display name.';
COMMENT ON COLUMN nex.pathway_url.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.pathway_url.url_type IS 'Type of URL (BioCyc, Yeastpathways).';
COMMENT ON COLUMN nex.pathway_url.pathway_id IS 'FK to PATHWAYDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.pathway_url.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.pathway_url.created_by IS 'Username of the person who entered the record into the database.';
ALTER TABLE nex.pathway_url ADD CONSTRAINT pathway_url_uk UNIQUE (pathway_id,display_name,obj_url);
ALTER TABLE nex.pathway_url ADD CONSTRAINT pathwayurl_type_ck CHECK (URL_TYPE IN ('BioCyc', 'YeastPathways'));
CREATE INDEX pathwayurl_source_fk_index ON nex.pathway_url (source_id);

DROP TABLE IF EXISTS nex.pathwaysummary CASCADE; 
CREATE TABLE nex.pathwaysummary (
	summary_id bigint NOT NULL DEFAULT nextval('summary_seq'),
	source_id bigint NOT NULL,
	pathway_id bigint NOT NULL,
	summary_type varchar(40) NOT NULL,
	text text NOT NULL,
	html text NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT pathwaysummary_pk PRIMARY KEY (summary_id)
) ;
COMMENT ON TABLE nex.pathwaysummary IS 'Summaries or paragraphs associated with pathways.';
COMMENT ON COLUMN nex.pathwaysummary.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.pathwaysummary.html IS 'Summary HTML mark-up.';
COMMENT ON COLUMN nex.pathwaysummary.summary_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.pathwaysummary.text IS 'Summary plain text.';
COMMENT ON COLUMN nex.pathwaysummary.pathway_id IS 'FK to PATHWAYDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.pathwaysummary.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.pathwaysummary.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.pathwaysummary.summary_type IS 'Type of summary (Metabolic).';
ALTER TABLE nex.pathwaysummary ADD CONSTRAINT pathwaysummary_uk UNIQUE (pathway_id,summary_type);
ALTER TABLE nex.pathwaysummary ADD CONSTRAINT pathwaysummary_type_ck CHECK (SUMMARY_TYPE IN ('Metabolic'));
CREATE INDEX pathwaysummary_source_fk_index ON nex.pathwaysummary (source_id);

DROP TABLE IF EXISTS nex.pathwaysummary_reference CASCADE; 
CREATE TABLE nex.pathwaysummary_reference (
	summary_reference_id bigint NOT NULL DEFAULT nextval('link_seq'),
	summary_id bigint NOT NULL,
	reference_id bigint NOT NULL,
	reference_order bigint NOT NULL,
	source_id bigint NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT pathwaysummary_reference_pk PRIMARY KEY (summary_reference_id)
) ;
COMMENT ON TABLE nex.pathwaysummary_reference IS 'References associatd with a paragraph summary.';
COMMENT ON COLUMN nex.pathwaysummary_reference.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.pathwaysummary_reference.reference_order IS 'Order of the references in the summary.';
COMMENT ON COLUMN nex.pathwaysummary_reference.summary_reference_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.pathwaysummary_reference.summary_id IS 'FK to PATHWAYSUMMARY.SUMMARY_ID.';
COMMENT ON COLUMN nex.pathwaysummary_reference.reference_id IS 'FK to REFERENCEDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.pathwaysummary_reference.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.pathwaysummary_reference.source_id IS 'FK to SOURCE.SOURCE_ID.';
ALTER TABLE nex.pathwaysummary_reference ADD CONSTRAINT pathwaysummary_reference_uk UNIQUE (summary_id,reference_id);
CREATE INDEX pathwaysummaryreference_ref_fk_index ON nex.pathwaysummary_reference (reference_id);
CREATE INDEX pathwaysummaryreference_source_fk_index ON nex.pathwaysummary_reference (source_id);

DROP TABLE IF EXISTS nex.filedbentity CASCADE; 
CREATE TABLE nex.filedbentity (
	dbentity_id bigint NOT NULL DEFAULT nextval('object_seq'),
    topic_id bigint NOT NULL,
	data_id bigint NOT NULL,
	format_id bigint NOT NULL,
    file_extension varchar(10) NOT NULL,
	file_date timestamp NOT NULL,
    year int NOT NULL,
	is_public boolean NOT NULL,
	is_in_spell boolean NOT NULL,
	is_in_browser boolean NOT NULL,
    file_size bigint,
	md5sum varchar(32),
    readme_file_id bigint,
	previous_file_name varchar(100),
	s3_url varchar(500),
	description varchar(4000),
    json text,
	CONSTRAINT filedbentity_pk PRIMARY KEY (dbentity_id)
) ;
COMMENT ON TABLE nex.filedbentity IS 'Details about files loaded into or dumped from the database or associated with the Download Server.';
COMMENT ON COLUMN nex.filedbentity.topic_id IS 'A broad domain or category of the file, FK to EDAM topic namespace.';
COMMENT ON COLUMN nex.filedbentity.file_date IS 'Release date or date the file was created.';
COMMENT ON COLUMN nex.filedbentity.format_id IS 'Standard file format, FK to EDAM format namespace.';
COMMENT ON COLUMN nex.filedbentity.file_extension IS 'File name extension.';
COMMENT ON COLUMN nex.filedbentity.data_id IS 'Type of data in the file, FK to EDAM data namespace.';
COMMENT ON COLUMN nex.filedbentity.is_public IS 'Whether the file is viewable to the public.';
COMMENT ON COLUMN nex.filedbentity.description IS 'A description or comment about the file not included elsewhere.';
COMMENT ON COLUMN nex.filedbentity.dbentity_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.filedbentity.s3_url IS 'Amazon S3 URL of the file.';
COMMENT ON COLUMN nex.filedbentity.previous_file_name IS 'File name on the Download Server.';
COMMENT ON COLUMN nex.filedbentity.readme_file_id IS 'The README associated with this file, FK to FILEDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.filedbentity.md5sum IS 'The 128-bit MD5 hash or checksum of the file.';
COMMENT ON COLUMN nex.filedbentity.is_in_spell IS 'Whether the file was loaded into SPELL.';
COMMENT ON COLUMN nex.filedbentity.is_in_browser IS 'Whether the file was loaded into a genome browser, such as JBrowse.';
COMMENT ON COLUMN nex.filedbentity.json IS 'JSON object of the data and file metadata.';
COMMENT ON COLUMN nex.filedbentity.year IS 'Year the file was created for filtering purposes.';
COMMENT ON COLUMN nex.filedbentity.file_Size IS 'Size of the file in bytes.';
CREATE INDEX filedbentity_format_fk_index ON nex.filedbentity (format_id);
CREATE INDEX filedbentity_topic_fk_index ON nex.filedbentity (topic_id);
CREATE INDEX filedbentity_data_fk_index ON nex.filedbentity (data_id);
CREATE INDEX filedbentity_file_fk_index ON nex.filedbentity (readme_file_id);
CREATE UNIQUE INDEX filedbentity_md5sum_uk_index ON nex.filedbentity (md5sum) where md5sum is NOT NULL;

DROP TABLE IF EXISTS nex.path CASCADE; 
CREATE TABLE nex.path (
	path_id bigint NOT NULL DEFAULT nextval('object_seq'),
	source_id bigint NOT NULL,
	path varchar(500) NOT NULL,
    description varchar(1000) NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT path_pk PRIMARY KEY (path_id)
) ;
COMMENT ON TABLE nex.path IS 'Virtual path to a file for browsing purposes.';
COMMENT ON COLUMN nex.path.path_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.path.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.path.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.path.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.path.path IS 'Virtual path to a file for browsing purposes.';
COMMENT ON COLUMN nex.path.description IS 'A description about the file path.';
ALTER TABLE nex.path ADD CONSTRAINT path_uk UNIQUE (path);
CREATE INDEX path_source_fk_index ON nex.path (source_id);

DROP TABLE IF EXISTS nex.file_path CASCADE; 
CREATE TABLE nex.file_path (
	file_path_id bigint NOT NULL DEFAULT nextval('link_seq'),
	file_id bigint NOT NULL,
	path_id bigint NOT NULL,
	source_id bigint NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT file_path_pk PRIMARY KEY (file_path_id)
) ;
COMMENT ON TABLE nex.file_path IS 'Paths associated with a file.';
COMMENT ON COLUMN nex.file_path.path_id IS 'FK to PATH.PATH_ID.';
COMMENT ON COLUMN nex.file_path.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.file_path.file_path_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.file_path.file_id IS 'FK to FILEDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.file_path.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.file_path.created_by IS 'Username of the person who entered the record into the database.';
ALTER TABLE nex.file_path ADD CONSTRAINT file_path_uk UNIQUE (file_id,path_id);
CREATE INDEX filepath_path_fk_index ON nex.file_path (path_id);
CREATE INDEX filepath_source_fk_index ON nex.file_path (source_id);

DROP TABLE IF EXISTS nex.file_keyword CASCADE;
CREATE TABLE nex.file_keyword (
    file_keyword_id bigint NOT NULL DEFAULT nextval('link_seq'),
    file_id bigint NOT NULL,
    keyword_id bigint NOT NULL,
    source_id bigint NOT NULL,
    date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
    created_by varchar(12) NOT NULL,
    CONSTRAINT file_keyword_pk PRIMARY KEY (file_keyword_id)
) ;
COMMENT ON TABLE nex.file_keyword IS 'Keywords associated with a file.';
COMMENT ON COLUMN nex.file_keyword.keyword_id IS 'FK to KEYWORD.KEYWORD_ID.';
COMMENT ON COLUMN nex.file_keyword.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.file_keyword.file_keyword_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.file_keyword.file_id IS 'FK to FILEDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.file_keyword.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.file_keyword.created_by IS 'Username of the person who entered the record into the database.';
ALTER TABLE nex.file_keyword ADD CONSTRAINT file_keyword_uk UNIQUE (file_id,keyword_id);
CREATE INDEX filekeyword_key_fk_index ON nex.file_keyword (keyword_id);
CREATE INDEX filekeyword_source_fk_index ON nex.file_keyword (source_id);


DROP TABLE IF EXISTS nex.book CASCADE; 
CREATE TABLE nex.book (
	book_id bigint NOT NULL DEFAULT nextval('object_seq'),
	format_name varchar(100) NOT NULL,
	display_name varchar(500) NOT NULL,
	obj_url varchar(500) NOT NULL,
	source_id bigint NOT NULL,
	bud_id integer,
	title varchar(200) NOT NULL,
	volume_title varchar(200),
	isbn varchar(20),
	total_pages integer,
	publisher varchar(100),
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT book_pk PRIMARY KEY (book_id)
) ;
COMMENT ON TABLE nex.book IS 'Details about book references.';
COMMENT ON COLUMN nex.book.isbn IS 'International Standard Book Number.';
COMMENT ON COLUMN nex.book.format_name IS 'Unique name to create download files.';
COMMENT ON COLUMN nex.book.obj_url IS 'URL of the object (relative for local links or complete for external links).';
COMMENT ON COLUMN nex.book.bud_id IS 'PK from BUD.BOOK.BOOK_NO.';
COMMENT ON COLUMN nex.book.book_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.book.display_name IS 'Public display name.';
COMMENT ON COLUMN nex.book.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.book.total_pages IS 'Total number of pages in the book.';
COMMENT ON COLUMN nex.book.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.book.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.book.title IS 'Title of the book.';
COMMENT ON COLUMN nex.book.volume_title IS 'Title if the book is part of a volume.';
COMMENT ON COLUMN nex.book.publisher IS 'Publisher of the book.';
ALTER TABLE nex.book ADD CONSTRAINT book_uk UNIQUE (title,volume_title);
CREATE INDEX book_source_fk_index ON nex.book (source_id);

DROP TABLE IF EXISTS nex.journal CASCADE; 
CREATE TABLE nex.journal (
	journal_id bigint NOT NULL DEFAULT nextval('object_seq'),
	format_name varchar(100) NOT NULL,
	display_name varchar(500) NOT NULL,
	obj_url varchar(500) NOT NULL,
	source_id bigint NOT NULL,
	bud_id integer,
	med_abbr varchar(100),
	title varchar(200),
	issn_print varchar(10),
	issn_electronic varchar(10),
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT journal_pk PRIMARY KEY (journal_id)
) ;
COMMENT ON TABLE nex.journal IS 'Details about journal references.';
COMMENT ON COLUMN nex.journal.title IS 'Full name of the journal.';
COMMENT ON COLUMN nex.journal.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.journal.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.journal.issn_electronic IS 'Electronic International Standard Serial Number.';
COMMENT ON COLUMN nex.journal.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.journal.journal_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.journal.bud_id IS 'PK from BUD.JOURNAL.JOURNAL_NO.';
COMMENT ON COLUMN nex.journal.display_name IS 'Public display name.';
COMMENT ON COLUMN nex.journal.med_abbr IS 'NLM abbreviation of the journal name.';
COMMENT ON COLUMN nex.journal.issn_print IS 'International Standard Serial Number.';
COMMENT ON COLUMN nex.journal.format_name IS 'Unique name to create download files.';
COMMENT ON COLUMN nex.journal.obj_url IS 'URL of the object (relative for local links or complete for external links).';
ALTER TABLE nex.journal ADD CONSTRAINT journal_uk UNIQUE (med_abbr,title);
CREATE INDEX journal_source_fk_index ON nex.journal (source_id);

DROP TABLE IF EXISTS nex.referencedbentity CASCADE; 
CREATE TABLE nex.referencedbentity (
	dbentity_id bigint NOT NULL DEFAULT nextval('object_seq'),
	method_obtained varchar(40) NOT NULL,
	publication_status varchar(40) NOT NULL,
	fulltext_status varchar(40) NOT NULL,
	citation varchar(500) NOT NULL,
	year smallint NOT NULL,
	pmid bigint,
	pmcid varchar(20),
	date_published varchar(40),
	date_revised timestamp,
	issue varchar(100),
	page varchar(40),
	volume varchar(40),
	title varchar(400),
	doi varchar(100),
	journal_id bigint,
	book_id bigint,
	CONSTRAINT reference_pk PRIMARY KEY (dbentity_id)
) ;
COMMENT ON TABLE nex.referencedbentity IS 'Details about references associated with annotations. Inherits from DBENTITY';
COMMENT ON COLUMN nex.referencedbentity.book_id IS 'FK to BOOK.BOOK_ID.';
COMMENT ON COLUMN nex.referencedbentity.issue IS 'Issue of the reference.';
COMMENT ON COLUMN nex.referencedbentity.fulltext_status IS 'State of the full text for the reference (N, NAA, NAM, NAP, Y, YF, YT).';
COMMENT ON COLUMN nex.referencedbentity.year IS 'Year the reference was published.';
COMMENT ON COLUMN nex.referencedbentity.page IS 'Page numbers of the reference.';
COMMENT ON COLUMN nex.referencedbentity.method_obtained IS 'How the reference was obtained (Curator PubMed reference, Curator triage, Curator non-PubMed reference, Gene registry, PDB script, PubMed script, SacchDB, YPD)';
COMMENT ON COLUMN nex.referencedbentity.doi IS 'Digital Object Identifier from the International DOI Foundation.';
COMMENT ON COLUMN nex.referencedbentity.date_revised IS 'Date if the reference was updated by NCBI.';
COMMENT ON COLUMN nex.referencedbentity.pmid IS 'PMID of the reference from NCBI.';
COMMENT ON COLUMN nex.referencedbentity.pmcid IS 'PMCID of the reference from NCBI.';
COMMENT ON COLUMN nex.referencedbentity.publication_status IS 'Publication state of the reference (Epub ahead of print, In preparation, In press, Published, Submitted, Unpublished).';
COMMENT ON COLUMN nex.referencedbentity.journal_id IS 'FK to JOURNAL.JOURNAL_ID.';
COMMENT ON COLUMN nex.referencedbentity.volume IS 'Volume of the reference.';
COMMENT ON COLUMN nex.referencedbentity.dbentity_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.referencedbentity.title IS 'Title of the reference.';
COMMENT ON COLUMN nex.referencedbentity.date_published IS 'Full date the reference was published.';
COMMENT ON COLUMN nex.referencedbentity.citation IS 'Full citation of the reference.';
ALTER TABLE nex.referencedbentity ADD CONSTRAINT reference_citation_uk UNIQUE (citation,pmid);
ALTER TABLE nex.referencedbentity ADD CONSTRAINT referencedbentity_method_obtained_ck CHECK (METHOD_OBTAINED IN ('Curator PubMed reference','Curator triage','Curator non-PubMed reference','Gene registry','PDB script','PubMed script','SacchDB','YPD'));
ALTER TABLE nex.referencedbentity ADD CONSTRAINT referencedbentity_fulltext_status_ck CHECK (FULLTEXT_STATUS IN ('N', 'NAA', 'NAM', 'NAP', 'Y', 'YF', 'YT'));
ALTER TABLE nex.referencedbentity ADD CONSTRAINT referencedbentity_pub_status_ck CHECK (PUBLICATION_STATUS IN ('Epub ahead of print','In preparation','In press','Published','Submitted','Unpublished'));
CREATE INDEX referencedbentity_book_fk_index ON nex.referencedbentity (book_id);
CREATE INDEX referencedbentity_journal_fk_index ON nex.referencedbentity (journal_id);
CREATE UNIQUE INDEX referencedbentity_pmid_index ON nex.referencedbentity (pmid);
CREATE UNIQUE INDEX referencedbentity_pmcid_index ON nex.referencedbentity (pmcid);

DROP TABLE IF EXISTS nex.reference_alias CASCADE; 
CREATE TABLE nex.reference_alias (
	alias_id bigint NOT NULL DEFAULT nextval('alias_seq'),
	display_name varchar(500) NOT NULL,
	source_id bigint NOT NULL,
	bud_id integer,
	reference_id bigint NOT NULL,
	alias_type varchar(40) NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT reference_alias_pk PRIMARY KEY (alias_id)
) ;
COMMENT ON TABLE nex.reference_alias IS 'Other names or synonyms for the reference.';
COMMENT ON COLUMN nex.reference_alias.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.reference_alias.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.reference_alias.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.reference_alias.alias_type IS 'Type of alias (Secondary SGDID, GO reference ID).';
COMMENT ON COLUMN nex.reference_alias.alias_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.reference_alias.display_name IS 'Public display name.';
COMMENT ON COLUMN nex.reference_alias.bud_id IS 'PK from BUD.DBXREF.DBXREF_NO.';
COMMENT ON COLUMN nex.reference_alias.reference_id IS 'FK to REFERENCEDBENTITY.DBENTITY_ID.';
ALTER TABLE nex.reference_alias ADD CONSTRAINT reference_alias_uk UNIQUE (reference_id,display_name,alias_type);
ALTER TABLE nex.reference_alias ADD CONSTRAINT referencealias_type_ck CHECK (ALIAS_TYPE IN ('Secondary SGDID','GO reference ID'));
CREATE INDEX referencealias_source_fk_index ON nex.reference_alias (source_id);

DROP TABLE IF EXISTS nex.reference_relation CASCADE; 
CREATE TABLE nex.reference_relation (
	reference_relation_id bigint NOT NULL DEFAULT nextval('relation_seq'),
	source_id bigint NOT NULL,
	parent_id bigint NOT NULL,
	child_id bigint NOT NULL,
	relation_type varchar(40) NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT reference_relation_pk PRIMARY KEY (reference_relation_id)
) ;
COMMENT ON TABLE nex.reference_relation IS 'Relationship between two references from PubMed, used for published errata, comments, retractions, etc.';
COMMENT ON COLUMN nex.reference_relation.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.reference_relation.reference_relation_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.reference_relation.relation_type IS 'Type of paper relationship as defined by PubMed.';
COMMENT ON COLUMN nex.reference_relation.child_id IS 'FK to REFERENCEDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.reference_relation.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.reference_relation.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.reference_relation.parent_id IS 'FK to REFERENCEDBENTITY.DBENTITY_ID.';
ALTER TABLE nex.reference_relation ADD CONSTRAINT reference_relation_uk UNIQUE (parent_id,child_id,relation_type);
CREATE INDEX referencerelation_source_fk_index ON nex.reference_relation (source_id);
CREATE INDEX referencerelation_parent_fk_index ON nex.reference_relation (parent_id);
CREATE INDEX referencerelation_child_fk_index ON nex.reference_relation (child_id);

DROP TABLE IF EXISTS nex.reference_url CASCADE; 
CREATE TABLE nex.reference_url (
	url_id bigint NOT NULL DEFAULT nextval('url_seq'),
	display_name varchar(500) NOT NULL,
	obj_url varchar(500) NOT NULL,
	source_id bigint NOT NULL,
	bud_id integer,
	reference_id bigint NOT NULL,
	url_type varchar(40) NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT reference_url_pk PRIMARY KEY (url_id)
) ;
COMMENT ON TABLE nex.reference_url IS 'URLs associated with references.';
COMMENT ON COLUMN nex.reference_url.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.reference_url.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.reference_url.url_type IS 'Type of URL (DOI full text, PMC full text, PubMed, PubMedCentral, Reference supplement).';
COMMENT ON COLUMN nex.reference_url.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.reference_url.reference_id IS 'FK to REFERENCEDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.reference_url.bud_id IS 'PK from BUD.URL.URL_NO.';
COMMENT ON COLUMN nex.reference_url.display_name IS 'Public display name.';
COMMENT ON COLUMN nex.reference_url.obj_url IS 'URL of the object (relative for local links or complete for external links).';
COMMENT ON COLUMN nex.reference_url.url_id IS 'Unique identifier (serial number).';
ALTER TABLE nex.reference_url ADD CONSTRAINT reference_url_uk UNIQUE (reference_id,display_name,obj_url);
ALTER TABLE nex.reference_url ADD CONSTRAINT referenceurl_type_ck CHECK (URL_TYPE IN ('DOI full text','PMC full text','PubMed','PubMedCentral','Reference supplement'));
CREATE INDEX referenceurl_source_fk_index ON nex.reference_url (source_id);

DROP TABLE IF EXISTS nex.referenceauthor CASCADE; 
CREATE TABLE nex.referenceauthor (
	referenceauthor_id bigint NOT NULL DEFAULT nextval('object_seq'),
	display_name varchar(500) NOT NULL,
	obj_url varchar(500) NOT NULL,
	source_id bigint NOT NULL,
	bud_id integer,
	reference_id bigint NOT NULL,
	orcid varchar(20),
	author_order smallint NOT NULL,
	author_type varchar(10) NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT referenceauthor_pk PRIMARY KEY (referenceauthor_id)
) ;
COMMENT ON TABLE nex.referenceauthor IS 'Links authors with references.';
COMMENT ON COLUMN nex.referenceauthor.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.referenceauthor.referenceauthor_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.referenceauthor.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.referenceauthor.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.referenceauthor.display_name IS 'Public display name.';
COMMENT ON COLUMN nex.referenceauthor.bud_id IS 'PK from BUD.AUTHOR_EDITOR.AUTHOR_EDITOR_NO.';
COMMENT ON COLUMN nex.referenceauthor.reference_id IS 'FK to REFERENCEDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.referenceauthor.obj_url IS 'URL of the object (relative for local links or complete for external links).';
COMMENT ON COLUMN nex.referenceauthor.author_type IS 'Type of author (Author, Editor).';
COMMENT ON COLUMN nex.referenceauthor.orcid IS 'Author Open Researcher and Contributor ID.';
COMMENT ON COLUMN nex.referenceauthor.author_order IS 'Order of the authors.';
ALTER TABLE nex.referenceauthor ADD CONSTRAINT referenceauthor_uk UNIQUE (reference_id,display_name,author_order);
ALTER TABLE nex.referenceauthor ADD CONSTRAINT referenceauthor_type_ck CHECK (AUTHOR_TYPE IN ('Author','Editor'));
CREATE INDEX referanceauthor_source_fk_index ON nex.referenceauthor (source_id);
CREATE INDEX referanceauthor_objurl_index ON nex.referenceauthor (obj_url);

DROP TABLE IF EXISTS nex.referencedeleted CASCADE; 
CREATE TABLE nex.referencedeleted (
	referencedeleted_id bigint NOT NULL DEFAULT nextval('object_seq'),
	pmid bigint NOT NULL,
	sgdid varchar(20),
    reason_deleted varchar(500),
    date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT referencedeleted_pk PRIMARY KEY (referencedeleted_id)
) ;
COMMENT ON TABLE nex.referencedeleted IS 'References permanently removed from the database via curator triage.';
COMMENT ON COLUMN nex.referencedeleted.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.referencedeleted.pmid IS 'PubMed ID of the reference from NCBI.';
COMMENT ON COLUMN nex.referencedeleted.referencedeleted_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.referencedeleted.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.referencedeleted.sgdid IS 'SGDID of the reference assigned before removal from the database.';
ALTER TABLE nex.referencedeleted ADD CONSTRAINT referencedeleted_sgdid_uk UNIQUE (sgdid);
ALTER TABLE nex.referencedeleted ADD CONSTRAINT referencedeleted_pubmed_uk UNIQUE (pmid);

DROP TABLE IF EXISTS nex.referencedocument CASCADE; 
CREATE TABLE nex.referencedocument (
	referencedocument_id bigint NOT NULL DEFAULT nextval('object_seq'),
	document_type varchar(40) NOT NULL,
	text text NOT NULL,
	html text NOT NULL,
	source_id bigint NOT NULL,
	reference_id bigint NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT referencedocument_pk PRIMARY KEY (referencedocument_id)
) ;
COMMENT ON TABLE nex.referencedocument IS 'Abstract or Medline entry associated with references.';
COMMENT ON COLUMN nex.referencedocument.referencedocument_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.referencedocument.reference_id IS 'FK to REFERENCEDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.referencedocument.text IS 'Plain text of the document.';
COMMENT ON COLUMN nex.referencedocument.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.referencedocument.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.referencedocument.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.referencedocument.html IS 'HTML mark-up of the document.';
COMMENT ON COLUMN nex.referencedocument.document_type IS 'Type of document (Abstract, Medline).';
ALTER TABLE nex.referencedocument ADD CONSTRAINT referencedocument_uk UNIQUE (reference_id,document_type);
ALTER TABLE nex.referencedocument ADD CONSTRAINT referencedocument_type_ck CHECK (DOCUMENT_TYPE IN ('Abstract','Medline'));
CREATE INDEX referencedocument_source_fk_index ON nex.referencedocument (source_id);
CREATE INDEX referencedocument_ref_fk_index ON nex.referencedocument (reference_id);

DROP TABLE IF EXISTS nex.referencetype CASCADE; 
CREATE TABLE nex.referencetype (
	referencetype_id bigint NOT NULL DEFAULT nextval('object_seq'),
	display_name varchar(500) NOT NULL,
	obj_url varchar(500) NOT NULL,
	source_id bigint NOT NULL,
	bud_id integer,
	reference_id bigint NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT referencetype_pk PRIMARY KEY (referencetype_id)
) ;
COMMENT ON TABLE nex.referencetype IS 'Links a reference with a reftype.';
COMMENT ON COLUMN nex.referencetype.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.referencetype.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.referencetype.referencetype_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.referencetype.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.referencetype.bud_id IS 'PK from BUD.REF_REFTYPE.REF_REFTYPE_NO.';
COMMENT ON COLUMN nex.referencetype.reference_id IS 'FK to REFERENCEDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.referencetype.display_name IS 'Public display name.';
COMMENT ON COLUMN nex.referencetype.obj_url IS 'URL of the object (relative for local links or complete for external links).';
ALTER TABLE nex.referencetype ADD CONSTRAINT referencetype_uk UNIQUE (reference_id,display_name,obj_url);
CREATE INDEX referencetype_source_fk_index ON nex.referencetype (source_id);

DROP TABLE IF EXISTS nex.referenceunlink CASCADE; 
CREATE TABLE nex.referenceunlink (
	referenceunlink_id bigint NOT NULL DEFAULT nextval('object_seq'),
	reference_id bigint NOT NULL,
	dbentity_id bigint NOT NULL,
	bud_id integer,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT referenceunlink_pk PRIMARY KEY (referenceunlink_id)
) ;
COMMENT ON TABLE nex.referenceunlink IS 'References that should not be associated with a specific locus, but should remain in the database.';
COMMENT ON COLUMN nex.referenceunlink.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.referenceunlink.referenceunlink_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.referenceunlink.dbentity_id IS 'FK to DBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.referenceunlink.bud_id IS 'PK from BUD.REF_UNLINK.REF_UNLINK_NO.';
COMMENT ON COLUMN nex.referenceunlink.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.referenceunlink.reference_id IS 'FK to REFERENCEDBENTITY.DBENTITY_ID.';
ALTER TABLE nex.referenceunlink ADD CONSTRAINT referenceunlink_uk UNIQUE (reference_id,dbentity_id);
CREATE INDEX referenceunlink_dbentity_fk_index ON nex.referenceunlink (dbentity_id);

DROP TABLE IF EXISTS nex.reference_file CASCADE; 
CREATE TABLE nex.reference_file (
	reference_file_id bigint NOT NULL DEFAULT nextval('link_seq'),
	reference_id bigint NOT NULL,
	file_id bigint NOT NULL,
	source_id bigint NOT NULL,
	date_created timestamp NOT NULL DEFAULT LOCALTIMESTAMP,
	created_by varchar(12) NOT NULL,
	CONSTRAINT reference_file_pk PRIMARY KEY (reference_file_id)
) ;
COMMENT ON TABLE nex.reference_file IS 'Files associated with a reference.';
COMMENT ON COLUMN nex.reference_file.date_created IS 'Date the record was entered into the database.';
COMMENT ON COLUMN nex.reference_file.reference_file_id IS 'Unique identifier (serial number).';
COMMENT ON COLUMN nex.reference_file.file_id IS 'FK to FILEDBENTITY.DBENTITY_ID.';
COMMENT ON COLUMN nex.reference_file.created_by IS 'Username of the person who entered the record into the database.';
COMMENT ON COLUMN nex.reference_file.source_id IS 'FK to SOURCE.SOURCE_ID.';
COMMENT ON COLUMN nex.reference_file.reference_id IS 'FK to REFERENCEDBENTITY.DBENTITY_ID.';
ALTER TABLE nex.reference_file ADD CONSTRAINT reference_file_uk UNIQUE (reference_id,file_id);
CREATE INDEX referencefile_file_fk_index ON nex.reference_file (file_id);
CREATE INDEX referencefile_source_fk_index ON nex.reference_file (source_id);
